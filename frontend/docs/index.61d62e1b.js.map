{"mappings":"AGOe,MADf,EAEI,CAAC,CAAO,AAAC,AACT,EAAC,CAAS,AAAC,AAIX,aAAY,CAAO,CAAE,EAAY,EAAE,CAAE,CACjC,IAAI,CAAC,CAAC,CAAO,CAAG,EAChB,IAAI,CAAC,CAAC,CAAS,CAAG,CACtB,CAEA,IAAI,SAAU,CACV,OAAO,IAAI,CAAC,CAAC,CAAO,AACxB,CAIA,MAAM,QAAQ,EAAU,EAAE,CAAE,EAAc,IAAI,CAAE,CAC5C,IAAM,EAAW,MAAM,MAAM,IAAI,CAAC,CAAC,CAAe,CAAC,EAAS,IACxD,EAAS,MAAM,EAAS,IAAI,GAIhC,OAHK,EAAS,EAAE,EACZ,IAAI,CAAC,CAAC,CAAoB,CAAC,EAAU,GAElC,CACX,CAKA,MAAM,SAAS,EAAU,EAAE,CAAE,EAAW,IAAI,CAAE,EAAc,IAAI,CAAE,CAC9D,IAAI,EAAW,MAAM,MAAM,IAAI,CAAC,CAAC,CAAe,CAAC,EAAS,GAAc,IAAI,CAAC,CAAC,CAAe,CAAC,OAAQ,GAAY,CAAC,IAC/G,EAAS,MAAM,EAAS,IAAI,GAIhC,OAHK,EAAS,EAAE,EACZ,IAAI,CAAC,CAAC,CAAoB,CAAC,EAAU,GAElC,CACX,CAKA,MAAM,WAAW,EAAU,EAAE,CAAE,EAAW,IAAI,CAAE,EAAc,IAAI,CAAE,CAChE,IAAI,EAAW,MAAM,MAAM,IAAI,CAAC,CAAC,CAAe,CAAC,EAAS,GAAc,IAAI,CAAC,CAAC,CAAe,CAAC,QAAS,GAAY,CAAC,IAChH,EAAS,MAAM,EAAS,IAAI,GAIhC,OAHK,EAAS,EAAE,EACZ,IAAI,CAAC,CAAC,CAAoB,CAAC,EAAU,GAElC,CACX,CAKA,MAAM,WAAW,EAAU,EAAE,CAAE,EAAW,IAAI,CAAE,EAAc,IAAI,CAAE,CAChE,IAAI,EAAW,MAAM,MAAM,IAAI,CAAC,CAAC,CAAe,CAAC,EAAS,GAAc,IAAI,CAAC,CAAC,CAAe,CAAC,SAAU,GAAY,CAAC,IACjH,EAAS,MAAM,EAAS,IAAI,GAIhC,OAHK,EAAS,EAAE,EACZ,IAAI,CAAC,CAAC,CAAoB,CAAC,EAAU,GAElC,CACX,CAKA,eAAe,CAAQ,CAAE,CACrB,IAAI,EAAa,CAAC,EAoBlB,OAnBI,aAAoB,UACpB,EAAS,OAAO,CAAC,CAAC,EAAO,KAErB,IAAI,EAAa,AAAC,MAAM,GAA2B,EAAlB,SAAS,GAC1C,EAAa,AAAc,SAAd,GAA+B,AAAc,UAAd,GAAgC,EAItE,KAAO,GAIJ,MAAM,OAAO,CAAC,CAAU,CAAC,EAAI,GAC9B,CAAA,CAAU,CAAC,EAAI,CAAG,CAAC,CAAU,CAAC,EAAI,CAAC,AAAA,EAEvC,CAAU,CAAC,EAAI,CAAC,IAAI,CAAC,IANrB,CAAU,CAAC,EAAI,CAAG,CAQ1B,GAEG,KAAK,SAAS,CAAC,EAC1B,CAKA,CAAC,CAAoB,CAAC,CAAQ,CAAE,CAAM,EAClC,GAAK,AAAmB,KAAnB,EAAS,MAAM,EAEhB,GAAI,EAAO,KAAK,EAAI,EAAO,IAAI,EAAK,AAAgB,oBAAhB,EAAO,KAAK,CAC5C,CAAA,GAAI,MAAM,OAAO,CAAC,EAAO,IAAI,EAAG,CAC5B,IAAI,EAAY,OAChB,GAAI,EAAO,IAAI,CAAC,MAAM,CAClB,IAAK,IAAM,KAAY,EAAO,IAAI,CAC9B,GAAa,CAAC,IAAI,EAAE,EAAS,GAAG,EAAI,aAAa,KAAK,CAAC,MAI3D,GAAa,CAAC,IAAI,EAAE,EAAO,KAAK,CAAC,KAAK,CAAC,AAG3C,OADA,GAAa,QACP,IAAI,EAAS,EAAS,MAAM,CAAE,EACxC,CAAA,MAIA,MAAM,IAAI,EAAS,EAAS,MAAM,CAAE,CAAC,WAAW,EAAE,EAAO,KAAK,EAAI,GAAG,GAAG,EAAE,EAAS,UAAU,CAAC,CAAC,CAAC,OAInG,GAAI,AAAmB,KAAnB,EAAS,MAAM,CACpB,MAAM,IAAI,EAAS,EAAS,MAAM,CAAE,CAAC,WAAW,EAAE,EAAO,KAAK,EAAI,GAAG,GAAG,EAAE,EAAS,UAAU,CAAC,CAAC,CAAC,OAIhG,MAAM,IAAI,EAAS,EAAS,MAAM,CAAE,CAAC,WAAW,EAAE,EAAS,UAAU,CAAC,CAAC,CAE/E,CAKA,CAAC,CAAe,CAAC,EAAU,EAAE,CAAE,EAAc,IAAI,EAC7C,IAAM,EAAM,IAAI,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC,CAAO,CAAC,EAAE,EAAQ,MAAM,CAAG,IAAM,EAAU,GAAG,EAAE,IAAI,CAAC,CAAC,CAAS,CAAC,CAAC,EAC9F,GAAI,EACA,IAAK,IAAM,KAAO,EACd,EAAI,YAAY,CAAC,MAAM,CAAC,EAAK,CAAW,CAAC,EAAI,EAGrD,OAAO,CACX,CAIA,CAAC,CAAe,CAAC,CAAS,CAAE,CAAQ,EAChC,MAAO,CACH,OAAQ,EACR,QAAS,CAAE,eAAgB,kBAAmB,EAC9C,KAAO,aAAoB,SAAW,IAAI,CAAC,cAAc,CAAC,GAAY,KAAK,SAAS,CAAC,EACzF,CACJ,CACJ,CAIO,MAAM,UAAiB,MAC1B,CAAC,CAAS,AAAC,AAEX,aAAY,CAAS,CAAE,CAAY,CAAE,CACjC,KAAK,CAAC,GACN,IAAI,CAAC,CAAC,CAAS,CAAG,CACtB,CAEA,IAAI,WAAY,CACZ,OAAO,IAAI,CAAC,CAAC,CAAS,AAC1B,CACJ,CEvGO,SAAS,EAAkB,CAAW,CAAE,CAAW,CAAE,EAAgB,IAAI,CAAE,EAAe,EAAE,CAAE,EAAoB,IAAI,CAAE,EAAY,CAAA,CAAK,MAqG9G,EApG9B,IAAI,EAAa,SAAS,aAAa,CAAC,GAIxC,GAFA,EAAc,EAAY,WAAW,GAEjC,AA8HD,SAA0B,CAAG,CAAE,EAAqB,CAAC,EACxD,OAAS,MAAA,GAAyC,AAAc,UAAd,OAAO,GAAqB,OAAO,IAAI,CAAC,GAAK,MAAM,EAAI,CAC7G,EAhIyB,EAAmB,GACpC,IAAK,IAAM,KAAiB,EACxB,EAAW,YAAY,CAAC,EAAe,CAAiB,CAAC,EAAc,EAK/E,UAyF8B,EA3FZ,IA6FV,AA7FsB,EA6FT,MAAM,CAAG,IAClB,MAAM,OAAO,CA9FK,GA+FlB,EAAc,SAAS,CAAC,GAAG,IA/FT,GAiGb,EAjGa,IAkGlB,EAAc,SAAS,CAAC,GAAG,CAlGT,IAE1B,AAgHD,SAAyB,CAAG,CAAE,EAAc,CAAC,EAChD,OAAS,MAAA,GAAyC,MAAM,OAAO,CAAC,IAAU,AAAe,KAAA,IAAf,EAAI,MAAM,EAAoB,EAAI,MAAM,EAAI,CAC1H,EAlHwB,IAEhB,GAAK,AAAe,MAAf,GAAyB,AAAe,MAAf,EAC1B,IAAK,IAAM,KAAgB,EAAa,CACpC,IAAM,EAAc,SAAS,aAAa,CAAC,MAC3C,EAAkB,EAAa,EAAc,GAC7C,EAAW,WAAW,CAAC,EAC3B,MAGC,GAAK,AAAe,UAAf,GAA6B,AAAe,YAAf,EACnC,IAAK,IAAM,KAAkB,EAAa,CACtC,GAAM,CAAC,EAAU,EAAU,EAAS,CAAG,EAAe,KAAK,CAAC,KACtD,EAAgB,SAAS,aAAa,CAAC,UAK7C,GAHA,EAAkB,EAAgB,GAAY,EAAW,GACzD,EAAc,KAAK,CAAG,EAElB,AAAa,KAAA,IAAb,EAAwB,CACxB,IAAI,EAAc,EAAW,aAAa,CAAC,CAAC,gBAAgB,EAAE,EAAS,EAAE,CAAC,QACtE,IAEA,AADA,CAAA,EAAc,SAAS,aAAa,CAAC,WAArC,EACY,KAAK,CAAG,EACpB,EAAW,WAAW,CAAC,IAE3B,EAAY,WAAW,CAAC,EAC5B,MAEI,EAAW,WAAW,CAAC,EAE/B,MAIA,EAAkB,EAAY,CAAW,CAAC,EAAE,CAAE,QAGjD,GAAI,EAAe,EAAa,IACjC,GAAI,AAAe,OAAf,EACA,EAAW,GAAG,CAAG,OAGhB,GAAK,AAAe,SAAf,GAA4B,EAAY,MAAM,CAAG,EAAI,CAC3D,IAAM,EAAmB,EACnB,EAAkB,SAAS,aAAa,CAAC,QAE/C,CADA,CAAA,EAAa,SAAS,aAAa,CAAC,MAApC,EACW,EAAE,CAAG,CAAC,EAAE,EAAiB,EAAE,CAAC,QAAQ,CAAC,CAC5C,EAAa,MAAM,CAAG,GACtB,EAAW,SAAS,CAAC,GAAG,CAAE,AAAA,CAAA,MAAM,OAAO,CAAC,GAAgB,CAAY,CAAC,EAAE,CAAG,CAAA,EAAgB,YAG9F,EAAgB,YAAY,CAAC,MAAO,EAAiB,EAAE,EACvD,EAAkB,EAAiB,EAAa,GAE5C,AAA0C,SAA1C,EAAkB,YAAY,CAAC,SAAwB,AAAyC,YAAzC,EAAiB,YAAY,CAAC,SACrF,EAAgB,SAAS,CAAC,GAAG,CAAC,mBAC9B,EAAW,MAAM,CAAC,EAAkB,IAGpC,EAAW,MAAM,CAAC,EAAiB,EAG3C,MAEI,EAAkB,EAAY,EAAa,GAOnD,aAHK,GACD,EAAc,WAAW,CAAC,GAEvB,CACX,CAKO,SAAS,EAAkB,CAAO,CAAE,CAAO,CAAE,CAAS,EACrD,EACA,EAAQ,SAAS,CAAG,EAGpB,EAAQ,SAAS,CAAG,CAE5B,CAqBO,SAAS,EAAe,CAAI,CAAE,EAAc,CAAC,EAChD,OAAQ,MAAA,GAA4C,AAAgB,KAAA,IAAhB,EAAK,MAAM,EAAoB,EAAK,MAAM,EAAI,CACtG,CD7KO,SAAS,EAAU,CAAA,QAAE,CAAO,CAAE,EACjC,IAAM,EAAW,SAAS,aAAa,CAAC,UACxC,CAAA,EAAS,SAAS,CAAG,GAErB,IAAM,EAAe,EAA4B,MAAO,GAAI,EAAU,iBACtE,EAA4B,KAAM,QAAS,GAC3C,EAA4B,MAAO,EAAS,EAAc,oBAAqB,KAAM,CAAA,GACrF,EAA4B,SAAU,KAAM,EAAc,sBAAsB,gBAAgB,CAAC,QAAS,AAAC,IACvG,EAAM,aAAa,CAAC,OAAO,CAAC,UAAU,KAAK,EAC/C,GAEA,QAAQ,KAAK,CAAC,GACd,EAAS,SAAS,EACtB,CAKO,SAAS,EAAc,CAAI,CAAE,CAAa,CAAE,CAAkB,EACjE,IAAM,EAAgB,CAAE,eAAgB,ACrBrC,SAA6B,CAAS,CAAE,EAAS,OAAO,EAC3D,IAAM,EAAU,IAAI,KAAK,GAUzB,OAAO,IAAI,KAAK,cAAc,CAAC,EATT,CAClB,KAAM,UACN,MAAO,UACP,IAAK,UACL,KAAM,UACN,OAAQ,UACR,OAAQ,SACZ,GAEsD,MAAM,CAAC,EACjE,EDS0E,EAAK,IAAI,EAAG,YAAa,EAAK,OAAO,CAAE,cAAe,EAAK,QAAQ,EAAI,EAAG,EAC1I,EAAkB,CAAE,cAAe,EAAK,MAAM,CAAE,YAAa,EAAK,IAAI,AAAC,EACvE,EAAW,ACFd,SAAgC,CAAU,CAAE,EAAY,IAAI,CAAE,EAAS,CAAC,CAAC,CAAE,EAAa,IAAI,CAAE,EAAY,CAAA,CAAK,EAClH,IAAM,EAAa,SAAS,cAAc,CAAC,GAAY,OAAO,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAA,GAE3F,IAAK,IAAM,KAAO,EAAQ,CACtB,IAAM,EAAgB,EAAW,aAAa,CAAC,CAAC,CAAC,EAAE,EAAI,CAAC,EACpD,GACA,CAAA,CAAa,CAAC,EAAY,YAAc,YAAY,CAAG,CAAM,CAAC,EAAI,AAAJ,CACtE,CACA,GAAI,EACA,IAAK,IAAM,KAAO,EAAY,CAC1B,IAAM,EAAO,EAAW,aAAa,CAAC,CAAC,CAAC,EAAE,EAAI,CAAC,CAAC,EAC5C,EAAW,YAAY,CAAC,GACxB,EAAW,YAAY,CAAC,EAAK,CAAU,CAAC,EAAI,EAEvC,GACL,EAAK,YAAY,CAAC,EAAK,CAAU,CAAC,EAAI,CAE9C,CAKJ,OAHI,GACA,EAAU,WAAW,CAAC,GAEnB,CACX,EDrBsD,CAAC,SAAS,EAAE,EAAK,KAAK,CAAC,CAAC,CAAE,EAAe,EAAe,GAG1G,GADA,EAAS,SAAS,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAK,QAAQ,CAAC,CAAC,EAC3C,EAAoB,CACpB,IAAM,EAAa,EAAS,aAAa,CAAC,QACtC,GACA,EAAW,gBAAgB,CAAC,SAAU,EAE9C,CACA,OAAO,CACX,CFhCe,MAAA,EACX,OAAO,YAAc,CAAC,OAAQ,MAAO,OAAO,AAAC,AAC7C,CAAA,GAAI,AACJ,CAAA,YAAa,AACb,EAAC,CAAY,AAAC,AAGd,aAAY,CAAM,CAAE,CAChB,IAAI,CAAC,GAAG,CAAG,IAAI,EAAQ,GACvB,IAAI,CAAC,CAAC,CAAoB,CAAC,EAC/B,CAIA,WAAW,CAAM,CAAE,CACf,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,OAAO,EAAE,EAAO,CAAC,EAEjC,KAAK,CAAC,EACf,CAKA,YAAY,CAAM,CAAE,CAChB,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,KAAK,EAAE,EAAO,CAAC,EAE/B,KAAK,CAAC,EACf,CAMA,WAAW,CAAY,CAAE,CACrB,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,SAAU,GAEzB,KAAK,CAAC,EACf,CAMA,WAAW,CAAY,CAAE,CACrB,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAO,GAEpB,KAAK,CAAC,EACf,CAKA,WAAY,CACR,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,IAAI,CAAC,AAAC,IAC3B,IAAM,EAAU,CAAC,EAIjB,GAHA,EAAY,WAAW,CAAC,OAAO,CAAC,AAAC,GAAU,CAAO,CAAC,EAAM,CAAG,SAAS,aAAa,CAAC,CAAC,OAAO,EAAE,EAAM,IAAI,CAAC,GACxG,OAAO,MAAM,CAAC,GAAS,OAAO,CAAC,AAAC,IAAa,EAAO,SAAS,CAAG,EAAG,GAE/D,EAAS,MAAM,CAEf,IAAK,IAAM,KADX,EAAS,IAAI,CAAC,CAAC,EAAG,IAAM,EAAE,IAAI,CAAG,EAAE,IAAI,EACpB,GAEf,AAAA,EAAc,EAAM,CAAO,CAAC,EAAK,KAAK,CAAC,CAAE,IAAI,CAAC,CAAC,CAAY,CAGvE,GAAG,KAAK,CAAC,EACb,CAKA,qBAAqB,CAAmB,CAAE,CACJ,YAA9B,OAAO,GACP,CAAA,IAAI,CAAC,CAAC,CAAY,CAAG,CADzB,CAGJ,CAKA,CAAC,CAAoB,CAAC,CAAM,EACxB,IAAM,EAAM,IAAI,IAAI,EACpB,CAAA,IAAI,CAAC,YAAY,CAAG,IAAI,UAAU,CAAC,KAAK,EAAE,EAAI,QAAQ,CAAC,CAAC,EAAE,EAAI,IAAI,CAAC,QAAQ,CAAC,EAC5E,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,UAAW,IAAI,CAAC,CAAC,CAAiB,CAAC,IAAI,CAAC,IAAI,GAC/E,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,QAAS,IAAI,CAAC,CAAC,CAAc,CAAC,IAAI,CAAC,IAAI,EAC9E,CAKA,CAAC,CAAc,CAAC,CAAK,EACjB,WAAW,IAAI,CAAC,CAAC,CAAuB,CAAC,IAAI,CAAC,IAAI,EAAG,IACzD,CAKA,CAAC,CAAuB,GACpB,QAAQ,GAAG,CAAC,uCACR,IAAI,CAAC,YAAY,EAAK,IAAI,CAAC,YAAY,CAAC,UAAU,EAAI,UAAU,MAAM,EAAM,IAAI,CAAC,YAAY,CAAC,UAAU,EAAI,UAAU,OAAO,EAC7H,IAAI,CAAC,YAAY,CAAC,KAAK,GAE3B,IAAI,CAAC,YAAY,CAAG,KACpB,IAAI,CAAC,CAAC,CAAoB,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAC/C,CAOA,CAAC,CAAiB,CAAC,CAAK,EACpB,IAAM,EAAa,KAAK,KAAK,CAAC,EAAM,IAAI,EAClC,EAAc,SAAS,aAAa,CAAC,CAAC,qBAAqB,EAAE,EAAW,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,EAEzF,GACA,EAAY,MAAM,GAIC,WAAnB,EAAW,IAAI,GACf,AAAA,EAAc,EAAW,IAAI,CAAE,SAAS,aAAa,CAAC,CAAC,OAAO,EAAE,EAAW,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAG,IAAI,CAAC,CAAC,CAAY,EAEhH,IAAI,CAAC,CAAC,CAAS,GAEvB,CAMA,CAAC,CAAS,GACN,EAAY,WAAW,CAAC,OAAO,CAAC,AAAC,IAC7B,IAAM,EAAS,SAAS,aAAa,CAAC,CAAC,OAAO,EAAE,EAAM,IAAI,CAAC,EAE3D,IAAK,IAAI,EAAI,EAAG,EAAI,EAAO,QAAQ,CAAC,MAAM,CAAE,IAAK,CAC7C,IAAI,EAAU,EAAO,QAAQ,CAAC,EAAE,CAC5B,EAAI,EAAI,EAEZ,KAAQ,GAAK,GAAO,EAAO,QAAQ,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAG,EAAQ,OAAO,CAAC,IAAI,EACtE,EAAO,QAAQ,CAAC,EAAI,EAAE,CAAC,KAAK,CAAC,EAAO,QAAQ,CAAC,EAAE,EAC/C,IAEJ,EAAO,QAAQ,CAAC,EAAI,EAAE,CAAC,KAAK,CAAC,EACjC,CACJ,EACJ,CACJ,CDrJA,IAAI,EAAkB,EACtB,MAAM,EAAc,IAAI,EAAY,+BA+DpC,SAAS,EAAe,CAAK,EACzB,OAAQ,EAAM,IAAI,EACd,IAAK,YACG,EAAM,MAAM,CAAC,OAAO,CAAC,aACrB,EAAM,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,WAC3B,EAAM,YAAY,CAAC,OAAO,CAAC,OAAQ,EAAM,MAAM,CAAC,YAAY,CAAC,gBAC7D,EAAkB,GAEtB,KACJ,KAAK,UACG,EAAM,MAAM,CAAC,OAAO,CAAC,YACrB,EAAM,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,WAElC,KACJ,KAAK,WAED,EAAM,cAAc,GACpB,KACJ,KAAK,YACD,EAAkB,EAAM,aAAa,CAAE,EAAE,GACzC,KACJ,KAAK,YACD,EAAkB,EAAM,aAAa,CAAE,EAAE,GACzC,KACJ,KAAK,OACD,IAAM,EAAS,EAAM,YAAY,CAAC,OAAO,CAAC,QACtC,GACA,EAAY,WAAW,CAAC,GAE5B,EAAkB,EAAM,aAAa,CAAE,EAAE,EAEjD,CACJ,CAEA,SAAS,EAAkB,CAAI,CAAE,CAAO,EAChC,GAAW,CAAC,EAAK,SAAS,CAAC,QAAQ,CAAC,YACpC,EAAK,SAAS,CAAC,GAAG,CAAC,YAEd,CAAC,GAAW,EAAK,SAAS,CAAC,QAAQ,CAAC,aACzC,EAAK,SAAS,CAAC,MAAM,CAAC,WAE9B,CAnGA,EAAY,oBAAoB,CAAC,AAAC,IAC9B,EAAM,cAAc,GACpB,IAAM,EAAW,IAAI,SAAS,EAAM,aAAa,EACjD,EAAS,GAAG,CAAC,SAAU,EAAM,SAAS,CAAC,OAAO,CAAC,WAAW,OAAO,CAAC,MAAM,EACxE,EAAY,UAAU,CAAC,EAC3B,GAKA,SAAS,aAAa,CAAC,kBAAkB,gBAAgB,CAAC,SAAU,AAAC,IACjE,EAAM,cAAc,GACpB,IAAM,EAAW,IAAI,SAAS,EAAM,aAAa,CAAE,EAAM,SAAS,EAClE,EAAY,UAAU,CAAC,GACvB,EAAM,aAAa,CAAC,KAAK,EAC7B,GAKA,SAAS,aAAa,CAAC,kBAAkB,gBAAgB,CAAC,SAAU,AAAC,IACjE,EAAM,cAAc,GACpB,IAAM,EAAS,EAAM,SAAS,CAAC,OAAO,CAAC,WAAW,OAAO,CAAC,MAAM,CAC5D,EACA,EAAY,WAAW,CAAC,GAGxB,QAAQ,KAAK,CAAC,iDAEtB,GAKA,SAAS,aAAa,CAAC,mBAAmB,gBAAgB,CAAC,SAAU,AAAC,IAClE,EAAM,cAAc,GACpB,IAAM,EAAS,EAAM,SAAS,CAAC,OAAO,CAAC,WAAW,OAAO,CAAC,MAAM,CAC5D,EACI,QAAQ,+CACR,EAAY,UAAU,CAAC,GAI3B,QAAQ,KAAK,CAAC,0CAEtB,GAMA,SAAS,aAAa,CAAC,kBAAkB,gBAAgB,CAAC,YAAa,GACvE,SAAS,aAAa,CAAC,kBAAkB,gBAAgB,CAAC,UAAW,GACrE,SAAS,aAAa,CAAC,eAAe,gBAAgB,CAAC,WAAY,GACnE,SAAS,aAAa,CAAC,eAAe,gBAAgB,CAAC,YAAa,GACpE,SAAS,aAAa,CAAC,eAAe,gBAAgB,CAAC,YAAa,GACpE,SAAS,aAAa,CAAC,eAAe,gBAAgB,CAAC,OAAQ,GAgD/D,EAAY,SAAS","sources":["<anon>","frontend/src/main.js","frontend/src/modules/TaskManager.js","frontend/src/modules/RestApi.js","frontend/src/modules/interface.js","frontend/src/modules/utilities.js"],"sourcesContent":["/*\r\n    Scrum Board - Inlämningsuppgift 2 - Javascript 2 - FE23\r\n    By Kristoffer Bengtsson\r\n\r\n    main.js\r\n    Main script of the frontend page. Event handlers for user input. \r\n*/ /*\r\n    Scrum Board - Inlämningsuppgift 2 - Javascript 2 - FE23\r\n    By Kristoffer Bengtsson\r\n\r\n    TaskManager.js\r\n    Class with methods for showing, creating and modifying tasks. \r\n*/ /*\r\n    Scrum Board - Inlämningsuppgift 2 - Javascript 2 - FE23\r\n    By Kristoffer Bengtsson\r\n\r\n    RestApi.js\r\n    Class for making requests to a REST API using JSON data. \r\n*/ class $227a5282996e58c2$export$2e2bcd8739ae039 {\n    #urlBase;\n    #urlSuffix;\n    // Set the base URL to access the api, and any default suffix (like \".json\" on Firebase)\n    // Each individual request method can then extend on the base url, and add query parameters. \n    constructor(baseUrl, urlSuffix = \"\"){\n        this.#urlBase = baseUrl;\n        this.#urlSuffix = urlSuffix;\n    }\n    get baseUrl() {\n        return this.#urlBase;\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\n    // Send GET request to API\n    async getJson(urlPath = \"\", queryParams = null) {\n        const response = await fetch(this.#buildRequestUrl(urlPath, queryParams));\n        let result = await response.json();\n        if (!response.ok) this.#handleResponseErrors(response, result);\n        return result;\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\n    // Send POST request to API\n    async postJson(urlPath = \"\", formData = null, queryParams = null) {\n        let response = await fetch(this.#buildRequestUrl(urlPath, queryParams), this.#getFetchOptions(\"POST\", formData ?? {}));\n        let result = await response.json();\n        if (!response.ok) this.#handleResponseErrors(response, result);\n        return result;\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\n    // Send PATCH request to API\n    async updateJson(urlPath = \"\", formData = null, queryParams = null) {\n        let response = await fetch(this.#buildRequestUrl(urlPath, queryParams), this.#getFetchOptions(\"PATCH\", formData ?? {}));\n        let result = await response.json();\n        if (!response.ok) this.#handleResponseErrors(response, result);\n        return result;\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\n    // Send DELETE request to API\n    async deleteJson(urlPath = \"\", formData = null, queryParams = null) {\n        let response = await fetch(this.#buildRequestUrl(urlPath, queryParams), this.#getFetchOptions(\"DELETE\", formData ?? {}));\n        let result = await response.json();\n        if (!response.ok) this.#handleResponseErrors(response, result);\n        return result;\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\n    // Create a json-encoded object from a FormData object\n    formdataToJson(formData) {\n        var dataObject = {};\n        if (formData instanceof FormData) formData.forEach((value, key)=>{\n            // In case the remote api is type sensitive (like Firebase), convert to numbers and booleans from FormData strings \n            let currValue = !isNaN(value) ? parseInt(value) : value;\n            currValue = currValue === \"true\" ? true : currValue === \"false\" ? false : currValue;\n            // Handle formdata with multiple value fields with the same name attribute (like SELECT tags \n            //  with the \"multiple\" attribute, checkbox groups etc)\n            if (!(key in dataObject)) dataObject[key] = currValue;\n            else {\n                if (!Array.isArray(dataObject[key])) dataObject[key] = [\n                    dataObject[key]\n                ];\n                dataObject[key].push(currValue);\n            }\n        });\n        return JSON.stringify(dataObject);\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\n    // Handle error responses from the API requests\n    #handleResponseErrors(response, result) {\n        if (response.status == 400) {\n            // Validation errors - build a HTML list of validation errors.\n            if (result.error && result.data && result.error == \"Validation error\") {\n                if (Array.isArray(result.data)) {\n                    let errorText = \"<ul>\";\n                    if (result.data.length) for (const errorMsg of result.data)errorText += `<li>${errorMsg.msg ?? \"No message\"}</li>`;\n                    else errorText += `<li>${result.error}</li>`;\n                    errorText += \"</ul>\";\n                    throw new $227a5282996e58c2$export$f2e832acab1bdd79(response.status, errorText);\n                }\n            } else throw new $227a5282996e58c2$export$f2e832acab1bdd79(response.status, `API Error: ${result.error ?? \"\"}  (${response.statusText})`);\n        } else if (response.status == 500) throw new $227a5282996e58c2$export$f2e832acab1bdd79(response.status, `API Error: ${result.error ?? \"\"}  (${response.statusText})`);\n        else throw new $227a5282996e58c2$export$f2e832acab1bdd79(response.status, `API Error: ${response.statusText}`);\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\n    // Assemble URL to send requests to.\n    #buildRequestUrl(urlPath = \"\", queryParams = null) {\n        const url = new URL(`${this.#urlBase}${urlPath.length ? \"/\" + urlPath : \"\"}${this.#urlSuffix}`);\n        if (queryParams) for(const key in queryParams)url.searchParams.append(key, queryParams[key]);\n        return url;\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\n    // Build options object for fetch() for submitting JSON data.\n    #getFetchOptions(reqMethod, formData) {\n        return {\n            method: reqMethod,\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: formData instanceof FormData ? this.formdataToJson(formData) : JSON.stringify(formData)\n        };\n    }\n}\nclass $227a5282996e58c2$export$f2e832acab1bdd79 extends Error {\n    #errorCode;\n    constructor(errorCode, errorMessage){\n        super(errorMessage);\n        this.#errorCode = errorCode;\n    }\n    get errorCode() {\n        return this.#errorCode;\n    }\n}\n\n\n/*\r\n    Scrum Board - Inlämningsuppgift 2 - Javascript 2 - FE23\r\n    By Kristoffer Bengtsson\r\n\r\n    interface.js\r\n    Module with functions for building user interface elements. \r\n*/ /*\r\n    Scrum Board - Inlämningsuppgift 2 - Javascript 2 - FE23\r\n    By Kristoffer Bengtsson\r\n\r\n    utilities.js\r\n    My general utility functions module (trimmed down to only what is used here)\r\n*/ ///////////////////////////////////////////////////////////////////////////////\n// Get date in readable format from a timestamp. (YYYY-MM-DD HH:II:SS)\nfunction $3a07be1bc7c23c7f$export$6c521e86931cae84(timestamp, locale = \"sv-SE\") {\n    const dateObj = new Date(timestamp);\n    const formatOptions = {\n        year: \"numeric\",\n        month: \"numeric\",\n        day: \"numeric\",\n        hour: \"numeric\",\n        minute: \"numeric\",\n        second: \"numeric\"\n    };\n    return new Intl.DateTimeFormat(locale, formatOptions).format(dateObj);\n}\nfunction $3a07be1bc7c23c7f$export$86b6f8925f11e682(templateId, container = null, values = {}, attributes = null, allowHTML = false) {\n    const newElement = document.getElementById(templateId).content.firstElementChild.cloneNode(true);\n    for(const key in values){\n        const targetElement = newElement.querySelector(`.${key}`);\n        if (targetElement) targetElement[allowHTML ? \"innerHTML\" : \"innerText\"] = values[key];\n    }\n    if (attributes) for(const key in attributes){\n        const attr = newElement.querySelector(`[${key}]`);\n        if (newElement.getAttribute(key)) newElement.setAttribute(key, attributes[key]);\n        else if (attr) attr.setAttribute(key, attributes[key]);\n    }\n    if (container) container.appendChild(newElement);\n    return newElement;\n}\nfunction $3a07be1bc7c23c7f$export$ab2fe02786cfa43c(elementType, elementText, parentElement = null, elementClass = \"\", elementAttributes = null, allowHTML = false) {\n    let newElement = document.createElement(elementType);\n    elementType = elementType.toLowerCase();\n    if ($3a07be1bc7c23c7f$export$4681d16351dbb61(elementAttributes, 1)) for(const attributeName in elementAttributes)newElement.setAttribute(attributeName, elementAttributes[attributeName]);\n    $3a07be1bc7c23c7f$export$68a589e25833f984(newElement, elementClass);\n    if ($3a07be1bc7c23c7f$export$7d558e3702f02251(elementText)) {\n        // If type is a list and text is an array, build list items\n        if (elementType == \"ul\" || elementType == \"ol\") for (const listItemText of elementText){\n            const newListItem = document.createElement(\"li\");\n            $3a07be1bc7c23c7f$export$375d3942de154e76(newListItem, listItemText, allowHTML);\n            newElement.appendChild(newListItem);\n        }\n        else if (elementType == \"select\" || elementType == \"datalist\") for (const optionItemText of elementText){\n            const [optValue, optLabel, optGroup] = optionItemText.split(\"|\");\n            const newOptionItem = document.createElement(\"option\");\n            $3a07be1bc7c23c7f$export$375d3942de154e76(newOptionItem, optLabel ?? optValue, allowHTML);\n            newOptionItem.value = optValue;\n            if (optGroup !== undefined) {\n                let optionGroup = newElement.querySelector(`optgroup[label=\"${optGroup}\"]`);\n                if (optionGroup === undefined || optionGroup === null) {\n                    optionGroup = document.createElement(\"optgroup\");\n                    optionGroup.label = optGroup;\n                    newElement.appendChild(optionGroup);\n                }\n                optionGroup.appendChild(newOptionItem);\n            } else newElement.appendChild(newOptionItem);\n        }\n        else $3a07be1bc7c23c7f$export$375d3942de154e76(newElement, elementText[0], allowHTML);\n    } else if ($3a07be1bc7c23c7f$export$a6f905893761824c(elementText, 1)) {\n        if (elementType == \"img\") newElement.alt = elementText;\n        else if (elementType == \"input\" && elementText.length > 0) {\n            const actualNewElement = newElement;\n            const newElementLabel = document.createElement(\"label\");\n            newElement = document.createElement(\"div\");\n            newElement.id = `${actualNewElement.id}-wrapper`;\n            if (elementClass.length > 0) newElement.classList.add((Array.isArray(elementClass) ? elementClass[0] : elementClass) + \"-wrapper\");\n            newElementLabel.setAttribute(\"for\", actualNewElement.id);\n            $3a07be1bc7c23c7f$export$375d3942de154e76(newElementLabel, elementText, allowHTML);\n            if (actualNewElement.getAttribute(\"type\") == \"radio\" || actualNewElement.getAttribute(\"type\") == \"checkbox\") {\n                newElementLabel.classList.add(`input-box-label`);\n                newElement.append(actualNewElement, newElementLabel);\n            } else newElement.append(newElementLabel, actualNewElement);\n        } else $3a07be1bc7c23c7f$export$375d3942de154e76(newElement, elementText, allowHTML);\n    }\n    if (parentElement !== undefined && parentElement !== null) parentElement.appendChild(newElement);\n    return newElement;\n}\nfunction $3a07be1bc7c23c7f$export$375d3942de154e76(element, content, allowHTML) {\n    if (allowHTML) element.innerHTML = content;\n    else element.innerText = content;\n}\nfunction $3a07be1bc7c23c7f$export$68a589e25833f984(targetElement, classesToAdd) {\n    if (targetElement !== undefined && targetElement !== null) {\n        if (classesToAdd.length > 0) {\n            if (Array.isArray(classesToAdd)) targetElement.classList.add(...classesToAdd);\n            else if ($3a07be1bc7c23c7f$export$a6f905893761824c(classesToAdd)) targetElement.classList.add(classesToAdd);\n        }\n    }\n}\nfunction $3a07be1bc7c23c7f$export$a6f905893761824c(text, lengthLimit = 1) {\n    return text !== undefined && text !== null && text.length !== undefined && text.length >= lengthLimit;\n}\nfunction $3a07be1bc7c23c7f$export$7d558e3702f02251(arr, lengthLimit = 1) {\n    return arr !== undefined && arr !== null && Array.isArray(arr) && arr.length !== undefined && arr.length >= lengthLimit;\n}\nfunction $3a07be1bc7c23c7f$export$4681d16351dbb61(obj, requiredProperties = 1) {\n    return obj !== undefined && obj !== null && typeof obj == \"object\" && Object.keys(obj).length >= requiredProperties;\n}\n\n\nfunction $dc5f931bf6ee91fa$export$3879b24e8245693d({ message: message }) {\n    const errorBox = document.querySelector(\"#errors\");\n    errorBox.innerHTML = \"\";\n    const errorWrapper = $3a07be1bc7c23c7f$export$ab2fe02786cfa43c(\"div\", \"\", errorBox, \"error-message\");\n    $3a07be1bc7c23c7f$export$ab2fe02786cfa43c(\"h2\", \"Error\", errorWrapper);\n    $3a07be1bc7c23c7f$export$ab2fe02786cfa43c(\"div\", message, errorWrapper, \"error-box-message\", null, true);\n    $3a07be1bc7c23c7f$export$ab2fe02786cfa43c(\"button\", \"OK\", errorWrapper, \"error-close-button\").addEventListener(\"click\", (event)=>{\n        event.currentTarget.closest(\"dialog\").close();\n    });\n    console.error(message);\n    errorBox.showModal();\n}\nfunction $dc5f931bf6ee91fa$export$8ecdd2a8383ed67b(task, containerElem, onAssignTaskSubmit) {\n    const elementValues = {\n        \"created-time\": $3a07be1bc7c23c7f$export$6c521e86931cae84(task.time),\n        \"task-text\": task.message,\n        \"assigned-to\": task.assigned ?? \"\"\n    };\n    const attributeValues = {\n        \"data-taskid\": task.taskid,\n        \"data-time\": task.time\n    };\n    const taskCard = $3a07be1bc7c23c7f$export$86b6f8925f11e682(`tpl-task-${task.state}`, containerElem, elementValues, attributeValues);\n    taskCard.classList.add(`color-${task.category}`);\n    if (onAssignTaskSubmit) {\n        const assignForm = taskCard.querySelector(\"form\");\n        if (assignForm) assignForm.addEventListener(\"submit\", onAssignTaskSubmit);\n    }\n    return taskCard;\n}\nfunction $dc5f931bf6ee91fa$export$cf04eaa0632e6ee5(task, onAssignTaskSubmit) {\n    const card = $3a07be1bc7c23c7f$export$ab2fe02786cfa43c(\"article\", task.message, null, [\n        \"task-box\",\n        `color-${task.category}`\n    ], {\n        \"data-taskid\": task.taskid,\n        \"data-time\": task.time,\n        draggable: task.state == \"wip\" ? \"true\" : \"false\"\n    });\n    card.prepend($3a07be1bc7c23c7f$export$ab2fe02786cfa43c(\"div\", $3a07be1bc7c23c7f$export$6c521e86931cae84(task.time), null, \"created-time\"));\n    switch(task.state){\n        case \"todo\":\n            const assignForm = $3a07be1bc7c23c7f$export$ab2fe02786cfa43c(\"form\", \"\", card, \"task-assign-form\");\n            $3a07be1bc7c23c7f$export$ab2fe02786cfa43c(\"input\", \"\", assignForm, \"\", {\n                placeholder: \"Assign task to\",\n                type: \"text\",\n                name: \"assigned\",\n                \"minlength\": \"2\",\n                \"maxlength\": \"20\",\n                required: \"true\"\n            });\n            $3a07be1bc7c23c7f$export$ab2fe02786cfa43c(\"button\", \"Assign\", assignForm);\n            if (onAssignTaskSubmit) assignForm.addEventListener(\"submit\", onAssignTaskSubmit);\n            break;\n        case \"wip\":\n            $3a07be1bc7c23c7f$export$ab2fe02786cfa43c(\"div\", task.assigned, card, \"assigned-to\");\n            const doneButtonWrapper = $3a07be1bc7c23c7f$export$ab2fe02786cfa43c(\"div\", \"\", card, \"task-button-wrapper\");\n            $3a07be1bc7c23c7f$export$ab2fe02786cfa43c(\"button\", \"Done \\xbb\", doneButtonWrapper);\n            break;\n        case \"done\":\n            $3a07be1bc7c23c7f$export$ab2fe02786cfa43c(\"div\", task.assigned, card, \"assigned-to\");\n            const deleteButtonWrapper = $3a07be1bc7c23c7f$export$ab2fe02786cfa43c(\"div\", \"\", card, \"task-delete-wrapper\");\n            $3a07be1bc7c23c7f$export$ab2fe02786cfa43c(\"button\", \"X\", deleteButtonWrapper);\n            break;\n    }\n    return card;\n}\n\n\nclass $4f86a80870cd31bd$export$2e2bcd8739ae039 {\n    static validStates = [\n        \"todo\",\n        \"wip\",\n        \"done\"\n    ];\n    api;\n    socketClient;\n    #onAssignTask;\n    constructor(apiUrl){\n        this.api = new (0, $227a5282996e58c2$export$2e2bcd8739ae039)(apiUrl);\n        this.#initSocketConnection(apiUrl);\n    }\n    ////////////////////////////////////////////////////////////////////////////////////////////////\n    // Remove a task\n    deleteTask(taskId) {\n        this.api.deleteJson(`delete/${taskId}`)//            .then(this.showTasks.bind(this))\n        .catch((0, $dc5f931bf6ee91fa$export$3879b24e8245693d));\n    }\n    ////////////////////////////////////////////////////////////////////////////////////////////////\n    // Move a task to the Done column\n    setTaskDone(taskId) {\n        this.api.updateJson(`done/${taskId}`)//            .then(this.showTasks.bind(this))\n        .catch((0, $dc5f931bf6ee91fa$export$3879b24e8245693d));\n    }\n    ////////////////////////////////////////////////////////////////////////////////////////////////\n    // Move task to In Progress column and assign a name\n    // FormData must contain two keys: taskid, assigned\n    assignTask(taskFormData) {\n        this.api.updateJson(\"assign\", taskFormData)//            .then(this.showTasks.bind(this))\n        .catch((0, $dc5f931bf6ee91fa$export$3879b24e8245693d));\n    }\n    ////////////////////////////////////////////////////////////////////////////////////////////////\n    // Add a new task to the ToDo column\n    // FormData must contain two keys: message, category\n    addNewTask(taskFormData) {\n        this.api.postJson(\"add\", taskFormData)//            .then(this.showTasks.bind(this))\n        .catch((0, $dc5f931bf6ee91fa$export$3879b24e8245693d));\n    }\n    ////////////////////////////////////////////////////////////////////////////////////////////////\n    // Builds display of all tasks on the page sorted in chronological order of creation. \n    showTasks() {\n        this.api.getJson(\"list\").then((taskData)=>{\n            const columns = {};\n            $4f86a80870cd31bd$export$2e2bcd8739ae039.validStates.forEach((state)=>columns[state] = document.querySelector(`#tasks-${state}-box`));\n            Object.values(columns).forEach((column)=>{\n                column.innerHTML = \"\";\n            });\n            if (taskData.length) {\n                taskData.sort((a, b)=>a.time - b.time);\n                for (const task of taskData)// columns[task.state].appendChild(createTaskCard(task, this.#onAssignTask));\n                (0, $dc5f931bf6ee91fa$export$8ecdd2a8383ed67b)(task, columns[task.state], this.#onAssignTask);\n            }\n        }).catch((0, $dc5f931bf6ee91fa$export$3879b24e8245693d));\n    }\n    ////////////////////////////////////////////////////////////////////////////////////////////////\n    // Set event handler function to be used by the \"Assign Task\" form of a task. \n    setOnAssignTaskEvent(onAssignTaskHandler) {\n        if (typeof onAssignTaskHandler == \"function\") this.#onAssignTask = onAssignTaskHandler;\n    }\n    ////////////////////////////////////////////////////////////////////////////////////////////////\n    // Start a websocket connection with the server to listen for task updates. \n    #initSocketConnection(apiUrl) {\n        const url = new URL(apiUrl);\n        this.socketClient = new WebSocket(`ws://${url.hostname}:${url.port}/updates`);\n        this.socketClient.addEventListener(\"message\", this.#onUpdateBroadcast.bind(this));\n        this.socketClient.addEventListener(\"close\", this.#onSocketClosed.bind(this));\n    }\n    ////////////////////////////////////////////////////////////////////////////////////////////////\n    // Websocket connection closed, try to reconnect in 4 seconds. \n    #onSocketClosed(event) {\n        setTimeout(this.#restartSocketConnection.bind(this), 4000);\n    }\n    ////////////////////////////////////////////////////////////////////////////////////////////////\n    // Reinitialize the websocket connection to server. \n    #restartSocketConnection() {\n        console.log(\"Reinitializing server connection...\");\n        if (this.socketClient && this.socketClient.readyState != WebSocket.CLOSED && this.socketClient.readyState != WebSocket.CLOSING) this.socketClient.close();\n        this.socketClient = null;\n        this.#initSocketConnection(this.api.baseUrl);\n    }\n    ////////////////////////////////////////////////////////////////////////////////////////////////\n    // Update changes to tasks on the page broadcasted over the websocket.\n    // Keeps the columns up-to-date and less disruptive to users trying to interact with tasks at\n    // the same time. \n    #onUpdateBroadcast(event) {\n        const updateData = JSON.parse(event.data);\n        const currentCard = document.querySelector(`article[data-taskid=\"${updateData.data.taskid}\"]`);\n        if (currentCard) currentCard.remove();\n        // Rebuild the task card to ensure it has the proper state controls\n        if (updateData.type != \"deleted\") {\n            (0, $dc5f931bf6ee91fa$export$8ecdd2a8383ed67b)(updateData.data, document.querySelector(`#tasks-${updateData.data.state}-box`), this.#onAssignTask);\n            // document.querySelector(`#tasks-${updateData.data.state}-box`).prepend(createTaskCard(updateData.data, this.#onAssignTask));\n            this.#sortTasks();\n        }\n    }\n    ////////////////////////////////////////////////////////////////////////////////////////////////\n    // Insertion sorts the order or the existing tasks in all the state columns, to ensure\n    // modified tasks appear in the correct place in the flow. \n    #sortTasks() {\n        $4f86a80870cd31bd$export$2e2bcd8739ae039.validStates.forEach((state)=>{\n            const column = document.querySelector(`#tasks-${state}-box`);\n            for(let i = 1; i < column.children.length; i++){\n                let current = column.children[i];\n                let j = i - 1;\n                while(j >= 0 && column.children[j].dataset.time > current.dataset.time){\n                    column.children[j + 1].after(column.children[j]);\n                    j--;\n                }\n                column.children[j + 1].after(current);\n            }\n        });\n    }\n}\n\n\nlet $9e3d9351c5a73c50$var$dragDoneCounter = 0;\nconst $9e3d9351c5a73c50$var$taskManager = new (0, $4f86a80870cd31bd$export$2e2bcd8739ae039)(\"http://localhost:3000/tasks\");\n////////////////////////////////////////////////////////////////////////////////////////////////\n// Event handler: Assign someone to a task\n$9e3d9351c5a73c50$var$taskManager.setOnAssignTaskEvent((event)=>{\n    event.preventDefault();\n    const formData = new FormData(event.currentTarget);\n    formData.set(\"taskid\", event.submitter.closest(\"article\").dataset.taskid);\n    $9e3d9351c5a73c50$var$taskManager.assignTask(formData);\n});\n///////////////////////////////////////////////////////////////////////////////\n// Event handler: add a new task\ndocument.querySelector(\"#new-task-form\").addEventListener(\"submit\", (event)=>{\n    event.preventDefault();\n    const formData = new FormData(event.currentTarget, event.submitter);\n    $9e3d9351c5a73c50$var$taskManager.addNewTask(formData);\n    event.currentTarget.reset();\n});\n///////////////////////////////////////////////////////////////////////////////\n// Event handler: Done button on In Progress tasks\ndocument.querySelector(\"#tasks-wip-box\").addEventListener(\"submit\", (event)=>{\n    event.preventDefault();\n    const taskId = event.submitter.closest(\"article\").dataset.taskid;\n    if (taskId) $9e3d9351c5a73c50$var$taskManager.setTaskDone(taskId);\n    else console.error(\"Error marking task as done: Task ID not found!\");\n});\n///////////////////////////////////////////////////////////////////////////////\n// Event handler: Delete button on Done tasks\ndocument.querySelector(\"#tasks-done-box\").addEventListener(\"submit\", (event)=>{\n    event.preventDefault();\n    const taskId = event.submitter.closest(\"article\").dataset.taskid;\n    if (taskId) {\n        if (confirm(\"Are you sure you wish to delete this task?\")) $9e3d9351c5a73c50$var$taskManager.deleteTask(taskId);\n    } else console.error(\"Error deleting task: Task ID not found!\");\n});\n///////////////////////////////////////////////////////////////////////////////\n// Event handlers: Drag and drop a task from In Progress to Done column.\ndocument.querySelector(\"#tasks-wip-box\").addEventListener(\"dragstart\", $9e3d9351c5a73c50$var$onDragDropTask);\ndocument.querySelector(\"#tasks-wip-box\").addEventListener(\"dragend\", $9e3d9351c5a73c50$var$onDragDropTask);\ndocument.querySelector(\"#tasks-done\").addEventListener(\"dragover\", $9e3d9351c5a73c50$var$onDragDropTask);\ndocument.querySelector(\"#tasks-done\").addEventListener(\"dragenter\", $9e3d9351c5a73c50$var$onDragDropTask);\ndocument.querySelector(\"#tasks-done\").addEventListener(\"dragleave\", $9e3d9351c5a73c50$var$onDragDropTask);\ndocument.querySelector(\"#tasks-done\").addEventListener(\"drop\", $9e3d9351c5a73c50$var$onDragDropTask);\nfunction $9e3d9351c5a73c50$var$onDragDropTask(event) {\n    switch(event.type){\n        case \"dragstart\":\n            if (event.target.matches(\"article\")) {\n                event.target.classList.add(\"dragged\");\n                event.dataTransfer.setData(\"text\", event.target.getAttribute(\"data-taskid\"));\n                $9e3d9351c5a73c50$var$dragDoneCounter = 0;\n            }\n            break;\n        case \"dragend\":\n            if (event.target.matches(\"article\")) event.target.classList.remove(\"dragged\");\n            break;\n        case \"dragover\":\n            // Needed or the drop event will not trigger\n            event.preventDefault();\n            break;\n        case \"dragenter\":\n            $9e3d9351c5a73c50$var$showDragIndicator(event.currentTarget, ++$9e3d9351c5a73c50$var$dragDoneCounter);\n            break;\n        case \"dragleave\":\n            $9e3d9351c5a73c50$var$showDragIndicator(event.currentTarget, --$9e3d9351c5a73c50$var$dragDoneCounter);\n            break;\n        case \"drop\":\n            const taskId = event.dataTransfer.getData(\"text\");\n            if (taskId) $9e3d9351c5a73c50$var$taskManager.setTaskDone(taskId);\n            $9e3d9351c5a73c50$var$showDragIndicator(event.currentTarget, --$9e3d9351c5a73c50$var$dragDoneCounter);\n            break;\n    }\n}\nfunction $9e3d9351c5a73c50$var$showDragIndicator(elem, counter) {\n    if (counter && !elem.classList.contains(\"dragover\")) elem.classList.add(\"dragover\");\n    else if (!counter && elem.classList.contains(\"dragover\")) elem.classList.remove(\"dragover\");\n}\n// Display all tasks when the page loads. \n$9e3d9351c5a73c50$var$taskManager.showTasks();\n\n\n//# sourceMappingURL=index.61d62e1b.js.map\n","/*\r\n    Scrum Board - Inlämningsuppgift 2 - Javascript 2 - FE23\r\n    By Kristoffer Bengtsson\r\n\r\n    main.js\r\n    Main script of the frontend page. Event handlers for user input. \r\n*/\r\nimport TaskManager from './modules/TaskManager.js';\r\n\r\nlet dragDoneCounter = 0;\r\nconst taskManager = new TaskManager('http://localhost:3000/tasks');\r\n\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////\r\n// Event handler: Assign someone to a task\r\ntaskManager.setOnAssignTaskEvent((event) => {\r\n    event.preventDefault();\r\n    const formData = new FormData(event.currentTarget);\r\n    formData.set('taskid', event.submitter.closest(\"article\").dataset.taskid);\r\n    taskManager.assignTask(formData);\r\n});\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n// Event handler: add a new task\r\ndocument.querySelector(\"#new-task-form\").addEventListener(\"submit\", (event) => {\r\n    event.preventDefault();\r\n    const formData = new FormData(event.currentTarget, event.submitter);\r\n    taskManager.addNewTask(formData);\r\n    event.currentTarget.reset();\r\n});\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n// Event handler: Done button on In Progress tasks\r\ndocument.querySelector(\"#tasks-wip-box\").addEventListener(\"submit\", (event) => {\r\n    event.preventDefault();\r\n    const taskId = event.submitter.closest(\"article\").dataset.taskid;\r\n    if (taskId) {\r\n        taskManager.setTaskDone(taskId);\r\n    }\r\n    else {\r\n        console.error(\"Error marking task as done: Task ID not found!\");\r\n    }\r\n});\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n// Event handler: Delete button on Done tasks\r\ndocument.querySelector(\"#tasks-done-box\").addEventListener(\"submit\", (event) => {\r\n    event.preventDefault();\r\n    const taskId = event.submitter.closest(\"article\").dataset.taskid;\r\n    if (taskId) {\r\n        if (confirm(\"Are you sure you wish to delete this task?\")) {\r\n            taskManager.deleteTask(taskId);\r\n        }\r\n    }\r\n    else {\r\n        console.error(\"Error deleting task: Task ID not found!\");\r\n    }\r\n});\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n// Event handlers: Drag and drop a task from In Progress to Done column.\r\n\r\ndocument.querySelector(\"#tasks-wip-box\").addEventListener(\"dragstart\", onDragDropTask);\r\ndocument.querySelector(\"#tasks-wip-box\").addEventListener(\"dragend\", onDragDropTask);\r\ndocument.querySelector(\"#tasks-done\").addEventListener(\"dragover\", onDragDropTask);\r\ndocument.querySelector(\"#tasks-done\").addEventListener(\"dragenter\", onDragDropTask);\r\ndocument.querySelector(\"#tasks-done\").addEventListener(\"dragleave\", onDragDropTask);\r\ndocument.querySelector(\"#tasks-done\").addEventListener(\"drop\", onDragDropTask);\r\n\r\nfunction onDragDropTask(event) {\r\n    switch (event.type) {\r\n        case \"dragstart\":\r\n            if (event.target.matches('article')) {\r\n                event.target.classList.add(\"dragged\");\r\n                event.dataTransfer.setData(\"text\", event.target.getAttribute(\"data-taskid\"));\r\n                dragDoneCounter = 0;\r\n            }\r\n            break;\r\n        case \"dragend\":\r\n            if (event.target.matches('article')) {\r\n                event.target.classList.remove(\"dragged\");\r\n            }\r\n            break;\r\n        case \"dragover\":\r\n            // Needed or the drop event will not trigger\r\n            event.preventDefault();\r\n            break;\r\n        case \"dragenter\":\r\n            showDragIndicator(event.currentTarget, ++dragDoneCounter);\r\n            break;\r\n        case \"dragleave\":\r\n            showDragIndicator(event.currentTarget, --dragDoneCounter);\r\n            break;\r\n        case \"drop\":\r\n            const taskId = event.dataTransfer.getData(\"text\");\r\n            if (taskId) {\r\n                taskManager.setTaskDone(taskId);\r\n            }\r\n            showDragIndicator(event.currentTarget, --dragDoneCounter);\r\n            break;\r\n    }\r\n}\r\n\r\nfunction showDragIndicator(elem, counter) {\r\n    if (counter && !elem.classList.contains(\"dragover\")) {\r\n        elem.classList.add(\"dragover\");\r\n    }\r\n    else if (!counter && elem.classList.contains(\"dragover\")) {\r\n        elem.classList.remove(\"dragover\");\r\n    }\r\n}\r\n\r\n\r\n\r\n// Display all tasks when the page loads. \r\ntaskManager.showTasks();\r\n","/*\r\n    Scrum Board - Inlämningsuppgift 2 - Javascript 2 - FE23\r\n    By Kristoffer Bengtsson\r\n\r\n    TaskManager.js\r\n    Class with methods for showing, creating and modifying tasks. \r\n*/\r\nimport RestApi from './RestApi.js';\r\nimport { showError, createTaskCard, createTaskBox } from './interface.js';\r\n\r\n\r\nexport default class TaskManager {\r\n    static validStates = ['todo', 'wip', 'done'];\r\n    api;\r\n    socketClient;\r\n    #onAssignTask;\r\n\r\n\r\n    constructor(apiUrl) {\r\n        this.api = new RestApi(apiUrl);\r\n        this.#initSocketConnection(apiUrl);\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Remove a task\r\n    deleteTask(taskId) {\r\n        this.api.deleteJson(`delete/${taskId}`)\r\n            //            .then(this.showTasks.bind(this))\r\n            .catch(showError);\r\n    }\r\n\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Move a task to the Done column\r\n    setTaskDone(taskId) {\r\n        this.api.updateJson(`done/${taskId}`)\r\n            //            .then(this.showTasks.bind(this))\r\n            .catch(showError);\r\n    }\r\n\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Move task to In Progress column and assign a name\r\n    // FormData must contain two keys: taskid, assigned\r\n    assignTask(taskFormData) {\r\n        this.api.updateJson('assign', taskFormData)\r\n            //            .then(this.showTasks.bind(this))\r\n            .catch(showError);\r\n    }\r\n\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Add a new task to the ToDo column\r\n    // FormData must contain two keys: message, category\r\n    addNewTask(taskFormData) {\r\n        this.api.postJson('add', taskFormData)\r\n            //            .then(this.showTasks.bind(this))\r\n            .catch(showError);\r\n    }\r\n\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Builds display of all tasks on the page sorted in chronological order of creation. \r\n    showTasks() {\r\n        this.api.getJson('list').then((taskData) => {\r\n            const columns = {};\r\n            TaskManager.validStates.forEach((state) => columns[state] = document.querySelector(`#tasks-${state}-box`));\r\n            Object.values(columns).forEach((column) => { column.innerHTML = \"\" });\r\n\r\n            if (taskData.length) {\r\n                taskData.sort((a, b) => a.time - b.time);\r\n                for (const task of taskData) {\r\n                    // columns[task.state].appendChild(createTaskCard(task, this.#onAssignTask));\r\n                    createTaskBox(task, columns[task.state], this.#onAssignTask);\r\n                }\r\n            }\r\n        }).catch(showError);\r\n    }\r\n\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Set event handler function to be used by the \"Assign Task\" form of a task. \r\n    setOnAssignTaskEvent(onAssignTaskHandler) {\r\n        if (typeof onAssignTaskHandler == \"function\") {\r\n            this.#onAssignTask = onAssignTaskHandler;\r\n        }\r\n    }\r\n\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Start a websocket connection with the server to listen for task updates. \r\n    #initSocketConnection(apiUrl) {\r\n        const url = new URL(apiUrl);\r\n        this.socketClient = new WebSocket(`ws://${url.hostname}:${url.port}/updates`);\r\n        this.socketClient.addEventListener(\"message\", this.#onUpdateBroadcast.bind(this));\r\n        this.socketClient.addEventListener(\"close\", this.#onSocketClosed.bind(this));\r\n    }\r\n\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Websocket connection closed, try to reconnect in 4 seconds. \r\n    #onSocketClosed(event) {\r\n        setTimeout(this.#restartSocketConnection.bind(this), 4000);\r\n    }\r\n\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Reinitialize the websocket connection to server. \r\n    #restartSocketConnection() {\r\n        console.log(\"Reinitializing server connection...\");\r\n        if (this.socketClient && (this.socketClient.readyState != WebSocket.CLOSED) && (this.socketClient.readyState != WebSocket.CLOSING)) {\r\n            this.socketClient.close();\r\n        }\r\n        this.socketClient = null;\r\n        this.#initSocketConnection(this.api.baseUrl);\r\n    }\r\n\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Update changes to tasks on the page broadcasted over the websocket.\r\n    // Keeps the columns up-to-date and less disruptive to users trying to interact with tasks at\r\n    // the same time. \r\n    #onUpdateBroadcast(event) {\r\n        const updateData = JSON.parse(event.data);\r\n        const currentCard = document.querySelector(`article[data-taskid=\"${updateData.data.taskid}\"]`);\r\n\r\n        if (currentCard) {\r\n            currentCard.remove();\r\n        }\r\n\r\n        // Rebuild the task card to ensure it has the proper state controls\r\n        if (updateData.type != \"deleted\") {\r\n            createTaskBox(updateData.data, document.querySelector(`#tasks-${updateData.data.state}-box`), this.#onAssignTask);\r\n            // document.querySelector(`#tasks-${updateData.data.state}-box`).prepend(createTaskCard(updateData.data, this.#onAssignTask));\r\n            this.#sortTasks();\r\n        }\r\n    }\r\n\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Insertion sorts the order or the existing tasks in all the state columns, to ensure\r\n    // modified tasks appear in the correct place in the flow. \r\n    #sortTasks() {\r\n        TaskManager.validStates.forEach((state) => {\r\n            const column = document.querySelector(`#tasks-${state}-box`);\r\n\r\n            for (let i = 1; i < column.children.length; i++) {\r\n                let current = column.children[i];\r\n                let j = i - 1;\r\n\r\n                while ((j >= 0) && (column.children[j].dataset.time > current.dataset.time)) {\r\n                    column.children[j + 1].after(column.children[j]);\r\n                    j--;\r\n                }\r\n                column.children[j + 1].after(current);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n","/*\r\n    Scrum Board - Inlämningsuppgift 2 - Javascript 2 - FE23\r\n    By Kristoffer Bengtsson\r\n\r\n    RestApi.js\r\n    Class for making requests to a REST API using JSON data. \r\n*/\r\nexport default class RestApi {\r\n    #urlBase;\r\n    #urlSuffix;\r\n\r\n    // Set the base URL to access the api, and any default suffix (like \".json\" on Firebase)\r\n    // Each individual request method can then extend on the base url, and add query parameters. \r\n    constructor(baseUrl, urlSuffix = \"\") {\r\n        this.#urlBase = baseUrl;\r\n        this.#urlSuffix = urlSuffix;\r\n    }\r\n\r\n    get baseUrl() {\r\n        return this.#urlBase;\r\n    }\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Send GET request to API\r\n    async getJson(urlPath = '', queryParams = null) {\r\n        const response = await fetch(this.#buildRequestUrl(urlPath, queryParams));\r\n        let result = await response.json();\r\n        if (!response.ok) {\r\n            this.#handleResponseErrors(response, result);\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Send POST request to API\r\n    async postJson(urlPath = '', formData = null, queryParams = null) {\r\n        let response = await fetch(this.#buildRequestUrl(urlPath, queryParams), this.#getFetchOptions(\"POST\", formData ?? {}));\r\n        let result = await response.json();\r\n        if (!response.ok) {\r\n            this.#handleResponseErrors(response, result);\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Send PATCH request to API\r\n    async updateJson(urlPath = '', formData = null, queryParams = null) {\r\n        let response = await fetch(this.#buildRequestUrl(urlPath, queryParams), this.#getFetchOptions(\"PATCH\", formData ?? {}));\r\n        let result = await response.json();\r\n        if (!response.ok) {\r\n            this.#handleResponseErrors(response, result);\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Send DELETE request to API\r\n    async deleteJson(urlPath = '', formData = null, queryParams = null) {\r\n        let response = await fetch(this.#buildRequestUrl(urlPath, queryParams), this.#getFetchOptions(\"DELETE\", formData ?? {}));\r\n        let result = await response.json();\r\n        if (!response.ok) {\r\n            this.#handleResponseErrors(response, result);\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Create a json-encoded object from a FormData object\r\n    formdataToJson(formData) {\r\n        var dataObject = {};\r\n        if (formData instanceof FormData) {\r\n            formData.forEach((value, key) => {\r\n                // In case the remote api is type sensitive (like Firebase), convert to numbers and booleans from FormData strings \r\n                let currValue = (!isNaN(value) ? parseInt(value) : value);\r\n                currValue = (currValue === \"true\" ? true : (currValue === \"false\" ? false : currValue));\r\n\r\n                // Handle formdata with multiple value fields with the same name attribute (like SELECT tags \r\n                //  with the \"multiple\" attribute, checkbox groups etc)\r\n                if (!(key in dataObject)) {\r\n                    dataObject[key] = currValue;\r\n                }\r\n                else {\r\n                    if (!Array.isArray(dataObject[key])) {\r\n                        dataObject[key] = [dataObject[key]];\r\n                    }\r\n                    dataObject[key].push(currValue);\r\n                }\r\n            });\r\n        }\r\n        return JSON.stringify(dataObject);\r\n    }\r\n\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Handle error responses from the API requests\r\n    #handleResponseErrors(response, result) {\r\n        if ((response.status == 400)) {\r\n            // Validation errors - build a HTML list of validation errors.\r\n            if (result.error && result.data && (result.error == \"Validation error\")) {\r\n                if (Array.isArray(result.data)) {\r\n                    let errorText = \"<ul>\";\r\n                    if (result.data.length) {\r\n                        for (const errorMsg of result.data) {\r\n                            errorText += `<li>${errorMsg.msg ?? \"No message\"}</li>`;\r\n                        }\r\n                    }\r\n                    else {\r\n                        errorText += `<li>${result.error}</li>`;\r\n                    }\r\n                    errorText += \"</ul>\";\r\n                    throw new ApiError(response.status, errorText);\r\n                }\r\n            }\r\n            // Other type of bad request - show the error message from API\r\n            else {\r\n                throw new ApiError(response.status, `API Error: ${result.error ?? \"\"}  (${response.statusText})`);\r\n            }\r\n        }\r\n        // Server errors - show the error message from API\r\n        else if (response.status == 500) {\r\n            throw new ApiError(response.status, `API Error: ${result.error ?? \"\"}  (${response.statusText})`);\r\n        }\r\n        // Other errors - show request status message\r\n        else {\r\n            throw new ApiError(response.status, `API Error: ${response.statusText}`);\r\n        }\r\n    }\r\n\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Assemble URL to send requests to.\r\n    #buildRequestUrl(urlPath = '', queryParams = null) {\r\n        const url = new URL(`${this.#urlBase}${urlPath.length ? \"/\" + urlPath : \"\"}${this.#urlSuffix}`);\r\n        if (queryParams) {\r\n            for (const key in queryParams) {\r\n                url.searchParams.append(key, queryParams[key]);\r\n            }\r\n        }\r\n        return url;\r\n    }\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Build options object for fetch() for submitting JSON data.\r\n    #getFetchOptions(reqMethod, formData) {\r\n        return {\r\n            method: reqMethod,\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: (formData instanceof FormData ? this.formdataToJson(formData) : JSON.stringify(formData)),\r\n        };\r\n    }\r\n}\r\n\r\n\r\n// Exception class for keeping response/error codes separate from the message text.\r\nexport class ApiError extends Error {\r\n    #errorCode;\r\n\r\n    constructor(errorCode, errorMessage) {\r\n        super(errorMessage);\r\n        this.#errorCode = errorCode;\r\n    }\r\n\r\n    get errorCode() {\r\n        return this.#errorCode;\r\n    }\r\n}","/*\r\n    Scrum Board - Inlämningsuppgift 2 - Javascript 2 - FE23\r\n    By Kristoffer Bengtsson\r\n\r\n    interface.js\r\n    Module with functions for building user interface elements. \r\n*/\r\nimport * as Utilities from './utilities.js';\r\n\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////\r\n// Show error messages in a popup dialog box\r\nexport function showError({ message }) {\r\n    const errorBox = document.querySelector(\"#errors\");\r\n    errorBox.innerHTML = \"\";\r\n\r\n    const errorWrapper = Utilities.createHTMLElement('div', '', errorBox, 'error-message');\r\n    Utilities.createHTMLElement('h2', 'Error', errorWrapper);\r\n    Utilities.createHTMLElement('div', message, errorWrapper, 'error-box-message', null, true);\r\n    Utilities.createHTMLElement('button', 'OK', errorWrapper, 'error-close-button').addEventListener(\"click\", (event) => {\r\n        event.currentTarget.closest('dialog').close();\r\n    });\r\n\r\n    console.error(message);\r\n    errorBox.showModal();\r\n}\r\n\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////\r\n// Create a card/box to display a task (with controls depending on its state) from HTML template\r\nexport function createTaskBox(task, containerElem, onAssignTaskSubmit) {\r\n    const elementValues = { \"created-time\": Utilities.timestampToDateTime(task.time), \"task-text\": task.message, \"assigned-to\": task.assigned ?? \"\" };\r\n    const attributeValues = { \"data-taskid\": task.taskid, \"data-time\": task.time };\r\n    const taskCard = Utilities.createHTMLFromTemplate(`tpl-task-${task.state}`, containerElem, elementValues, attributeValues);\r\n\r\n    taskCard.classList.add(`color-${task.category}`);\r\n    if (onAssignTaskSubmit) {\r\n        const assignForm = taskCard.querySelector(\"form\");\r\n        if (assignForm) {\r\n            assignForm.addEventListener(\"submit\", onAssignTaskSubmit);\r\n        }\r\n    }\r\n    return taskCard;\r\n}\r\n\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////\r\n// Create a card/box to display a task (with controls depending on its state)\r\nexport function createTaskCard(task, onAssignTaskSubmit) {\r\n    const card = Utilities.createHTMLElement('article', task.message, null, ['task-box', `color-${task.category}`], { \"data-taskid\": task.taskid, \"data-time\": task.time, draggable: (task.state == \"wip\" ? \"true\" : \"false\") });\r\n    card.prepend(Utilities.createHTMLElement('div', Utilities.timestampToDateTime(task.time), null, 'created-time'));\r\n    switch (task.state) {\r\n        case \"todo\": // Assign task form\r\n            const assignForm = Utilities.createHTMLElement('form', '', card, 'task-assign-form');\r\n            Utilities.createHTMLElement('input', '', assignForm, '', { placeholder: \"Assign task to\", type: \"text\", name: \"assigned\", \"minlength\": \"2\", \"maxlength\": \"20\", required: \"true\" });\r\n            Utilities.createHTMLElement('button', 'Assign', assignForm);\r\n            if (onAssignTaskSubmit) {\r\n                assignForm.addEventListener(\"submit\", onAssignTaskSubmit);\r\n            }\r\n            break;\r\n        case \"wip\": // Done button and display assigned name\r\n            Utilities.createHTMLElement('div', task.assigned, card, 'assigned-to');\r\n            const doneButtonWrapper = Utilities.createHTMLElement('div', '', card, 'task-button-wrapper');\r\n            Utilities.createHTMLElement('button', 'Done »', doneButtonWrapper);\r\n            break;\r\n        case \"done\": // Delete button and display assigned name\r\n            Utilities.createHTMLElement('div', task.assigned, card, 'assigned-to');\r\n            const deleteButtonWrapper = Utilities.createHTMLElement('div', '', card, 'task-delete-wrapper');\r\n            Utilities.createHTMLElement('button', 'X', deleteButtonWrapper);\r\n            break;\r\n    }\r\n    return card;\r\n}\r\n","/*\r\n    Scrum Board - Inlämningsuppgift 2 - Javascript 2 - FE23\r\n    By Kristoffer Bengtsson\r\n\r\n    utilities.js\r\n    My general utility functions module (trimmed down to only what is used here)\r\n*/\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n// Get date in readable format from a timestamp. (YYYY-MM-DD HH:II:SS)\r\nexport function timestampToDateTime(timestamp, locale = 'sv-SE') {\r\n    const dateObj = new Date(timestamp);\r\n    const formatOptions = {\r\n        year: \"numeric\",\r\n        month: \"numeric\",\r\n        day: \"numeric\",\r\n        hour: \"numeric\",\r\n        minute: \"numeric\",\r\n        second: \"numeric\"\r\n    };\r\n\r\n    return new Intl.DateTimeFormat(locale, formatOptions).format(dateObj);\r\n}\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n// Create and return (or attach) a HTML element based on a template.\r\n//  - templateId is the ID of the <template> tag in the HTML file to use.\r\n//  - container is the parent element to insert the new element into.\r\n//  - values is an object where the key is a classname and the value the text\r\n//    to set as innerText of the matching element within the new object.\r\nexport function createHTMLFromTemplate(templateId, container = null, values = {}, attributes = null, allowHTML = false) {\r\n    const newElement = document.getElementById(templateId).content.firstElementChild.cloneNode(true);\r\n\r\n    for (const key in values) {\r\n        const targetElement = newElement.querySelector(`.${key}`);\r\n        if (targetElement)\r\n            targetElement[allowHTML ? \"innerHTML\" : \"innerText\"] = values[key];\r\n    }\r\n    if (attributes) {\r\n        for (const key in attributes) {\r\n            const attr = newElement.querySelector(`[${key}]`);\r\n            if (newElement.getAttribute(key)) {\r\n                newElement.setAttribute(key, attributes[key]);\r\n            }\r\n            else if (attr) {\r\n                attr.setAttribute(key, attributes[key]);\r\n            }\r\n        }\r\n    }\r\n    if (container) {\r\n        container.appendChild(newElement);\r\n    }\r\n    return newElement;\r\n}\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////\r\n// Oneliner to create and return a new DOM element with content, optionally appending it to a parent element.\r\n//  * elementText can either be a string holding the content of the tag or the ALT of an img tag, or an array of strings \r\n//    containing the listitems/options for UL, OL, SELECT and DATALIST tags. In the case of SELECT/DATALIST the strings \r\n//    can also be formated like: SELECT: value|textlabel|optgroup      DATALIST: value|textlabel\r\n//  * elementClass can be a string or an array of strings holding CSS class(es) to apply to the element. \r\n//  * The elementAttributes parameter can be an object with a property for each attribute to set on the HTML element. \r\n// Function returns the newly created DOM element (or its wrapper element if a wrapper is created).\r\n// Remember: Set CSS \"white-space: pre-wrap;\" on element if allowHTML is true and newlines still should displayed like with innerText. \r\nexport function createHTMLElement(elementType, elementText, parentElement = null, elementClass = '', elementAttributes = null, allowHTML = false) {\r\n    let newElement = document.createElement(elementType);\r\n\r\n    elementType = elementType.toLowerCase();\r\n\r\n    if (getIsValidObject(elementAttributes, 1)) {\r\n        for (const attributeName in elementAttributes) {\r\n            newElement.setAttribute(attributeName, elementAttributes[attributeName]);\r\n        }\r\n    }\r\n    addClassToElement(newElement, elementClass);\r\n\r\n    if (getIsValidArray(elementText)) {\r\n        // If type is a list and text is an array, build list items\r\n        if ((elementType == 'ul') || (elementType == 'ol')) {\r\n            for (const listItemText of elementText) {\r\n                const newListItem = document.createElement(\"li\");\r\n                setElementContent(newListItem, listItemText, allowHTML);\r\n                newElement.appendChild(newListItem);\r\n            }\r\n        }\r\n        // If type is a select form element and text is an array, build select option list\r\n        else if ((elementType == 'select') || (elementType == 'datalist')) {\r\n            for (const optionItemText of elementText) {\r\n                const [optValue, optLabel, optGroup] = optionItemText.split('|');\r\n                const newOptionItem = document.createElement(\"option\");\r\n\r\n                setElementContent(newOptionItem, (optLabel ?? optValue), allowHTML);\r\n                newOptionItem.value = optValue;\r\n\r\n                if (optGroup !== undefined) {\r\n                    let optionGroup = newElement.querySelector(`optgroup[label=\"${optGroup}\"]`);\r\n                    if ((optionGroup === undefined) || (optionGroup === null)) {\r\n                        optionGroup = document.createElement(\"optgroup\");\r\n                        optionGroup.label = optGroup;\r\n                        newElement.appendChild(optionGroup);\r\n                    }\r\n                    optionGroup.appendChild(newOptionItem);\r\n                }\r\n                else {\r\n                    newElement.appendChild(newOptionItem);\r\n                }\r\n            }\r\n        }\r\n        // Array but not a list-type element, just use the first string \r\n        else {\r\n            setElementContent(newElement, elementText[0], allowHTML);\r\n        }\r\n    }\r\n    else if (getIsValidText(elementText, 1)) {\r\n        if (elementType == 'img') {\r\n            newElement.alt = elementText;\r\n        }\r\n        // Special case for input fields, create wrapper and labels for them.\r\n        else if ((elementType == 'input') && (elementText.length > 0)) {\r\n            const actualNewElement = newElement;\r\n            const newElementLabel = document.createElement(\"label\");\r\n            newElement = document.createElement(\"div\");\r\n            newElement.id = `${actualNewElement.id}-wrapper`;\r\n            if (elementClass.length > 0) {\r\n                newElement.classList.add((Array.isArray(elementClass) ? elementClass[0] : elementClass) + \"-wrapper\");\r\n            }\r\n\r\n            newElementLabel.setAttribute(\"for\", actualNewElement.id);\r\n            setElementContent(newElementLabel, elementText, allowHTML);\r\n\r\n            if ((actualNewElement.getAttribute(\"type\") == \"radio\") || (actualNewElement.getAttribute(\"type\") == \"checkbox\")) {\r\n                newElementLabel.classList.add(`input-box-label`);\r\n                newElement.append(actualNewElement, newElementLabel);\r\n            }\r\n            else {\r\n                newElement.append(newElementLabel, actualNewElement);\r\n            }\r\n\r\n        }\r\n        else {\r\n            setElementContent(newElement, elementText, allowHTML);\r\n        }\r\n    }\r\n\r\n    if ((parentElement !== undefined) && (parentElement !== null)) {\r\n        parentElement.appendChild(newElement);\r\n    }\r\n    return newElement;\r\n}\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////\r\n// Sets the content of an element as text or HTML depending on the allowHTML parameter. \r\nexport function setElementContent(element, content, allowHTML) {\r\n    if (allowHTML) {\r\n        element.innerHTML = content;\r\n    }\r\n    else {\r\n        element.innerText = content;\r\n    }\r\n}\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////\r\n// Add CSS class(es) to a DOM element\r\nexport function addClassToElement(targetElement, classesToAdd) {\r\n    if ((targetElement !== undefined) && (targetElement !== null)) {\r\n        if (classesToAdd.length > 0) {\r\n            if (Array.isArray(classesToAdd)) {\r\n                targetElement.classList.add(...classesToAdd);\r\n            }\r\n            else if (getIsValidText(classesToAdd)) {\r\n                targetElement.classList.add(classesToAdd);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////\r\n// Utility to determine if a text variable has been set and assigned a value.\r\nexport function getIsValidText(text, lengthLimit = 1) {\r\n    return ((text !== undefined) && (text !== null) && (text.length !== undefined) && (text.length >= lengthLimit));\r\n}\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////\r\n// Utility to determine if a variable is an array with content\r\nexport function getIsValidArray(arr, lengthLimit = 1) {\r\n    return ((arr !== undefined) && (arr !== null) && (Array.isArray(arr)) && (arr.length !== undefined) && (arr.length >= lengthLimit));\r\n}\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////\r\n//  Utility to determine if a variable is an object with properties set\r\nexport function getIsValidObject(obj, requiredProperties = 1) {\r\n    return ((obj !== undefined) && (obj !== null) && (typeof obj == \"object\") && (Object.keys(obj).length >= requiredProperties));\r\n}\r\n\r\n"],"names":["$227a5282996e58c2$export$2e2bcd8739ae039","urlBase","urlSuffix","constructor","baseUrl","getJson","urlPath","queryParams","response","fetch","buildRequestUrl","result","json","ok","handleResponseErrors","postJson","formData","getFetchOptions","updateJson","deleteJson","formdataToJson","dataObject","FormData","forEach","value","key","currValue","isNaN","parseInt","Array","isArray","push","JSON","stringify","status","error","data","errorText","length","errorMsg","msg","$227a5282996e58c2$export$f2e832acab1bdd79","statusText","url","URL","searchParams","append","reqMethod","method","headers","body","Error","errorCode","errorMessage","$3a07be1bc7c23c7f$export$ab2fe02786cfa43c","elementType","elementText","parentElement","elementClass","elementAttributes","allowHTML","targetElement","newElement","document","createElement","toLowerCase","$3a07be1bc7c23c7f$export$4681d16351dbb61","obj","requiredProperties","Object","keys","attributeName","setAttribute","classesToAdd","classList","add","$3a07be1bc7c23c7f$export$a6f905893761824c","$3a07be1bc7c23c7f$export$7d558e3702f02251","arr","lengthLimit","undefined","listItemText","newListItem","$3a07be1bc7c23c7f$export$375d3942de154e76","appendChild","optionItemText","optValue","optLabel","optGroup","split","newOptionItem","optionGroup","querySelector","label","alt","actualNewElement","newElementLabel","id","getAttribute","element","content","innerHTML","innerText","text","$dc5f931bf6ee91fa$export$3879b24e8245693d","message","errorBox","errorWrapper","addEventListener","event","currentTarget","closest","close","console","showModal","$dc5f931bf6ee91fa$export$8ecdd2a8383ed67b","task","containerElem","onAssignTaskSubmit","elementValues","$3a07be1bc7c23c7f$export$6c521e86931cae84","timestamp","locale","dateObj","Date","Intl","DateTimeFormat","year","month","day","hour","minute","second","format","time","assigned","attributeValues","taskid","taskCard","$3a07be1bc7c23c7f$export$86b6f8925f11e682","templateId","container","values","attributes","getElementById","firstElementChild","cloneNode","attr","state","category","assignForm","$4f86a80870cd31bd$export$2e2bcd8739ae039","validStates","api","socketClient","onAssignTask","apiUrl","initSocketConnection","deleteTask","taskId","catch","setTaskDone","assignTask","taskFormData","addNewTask","showTasks","then","taskData","columns","column","sort","a","b","setOnAssignTaskEvent","onAssignTaskHandler","WebSocket","hostname","port","onUpdateBroadcast","bind","onSocketClosed","setTimeout","restartSocketConnection","log","readyState","CLOSED","CLOSING","updateData","parse","currentCard","remove","type","sortTasks","i","children","current","j","dataset","after","$9e3d9351c5a73c50$var$dragDoneCounter","$9e3d9351c5a73c50$var$taskManager","$9e3d9351c5a73c50$var$onDragDropTask","target","matches","dataTransfer","setData","preventDefault","$9e3d9351c5a73c50$var$showDragIndicator","getData","elem","counter","contains","set","submitter","reset","confirm"],"version":3,"file":"index.61d62e1b.js.map"}