{"mappings":"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","sources":["<anon>","frontend/src/main.js","frontend/src/modules/tasks.js","frontend/src/modules/utilities.js","frontend/src/modules/RestApi.js","frontend/src/modules/interface.js"],"sourcesContent":["/*\r\n    main.js\r\n\r\n    Main script of the frontend page. Handlers for user input. \r\n*/ /*\r\n    tasks.js\r\n\r\n    Module with functions for showing, creating and modifying tasks. \r\n*/ /*\r\n    General utility functions\r\n*/ //////////////////////////////////////////////////////////////////////////////////////////////////////\n// Set an event listener on the element(s) matching the targetIdentifier selector, if any exist.\n// Return an array with all matching elements. \nfunction $3a07be1bc7c23c7f$export$d031894fc27e45(targetSelector, eventType, eventCallback) {\n    const eventTargets = document.querySelectorAll(targetSelector);\n    const targetElements = [];\n    if (eventTargets !== undefined && eventTargets !== null) eventTargets.forEach((eventTarget)=>{\n        eventTarget.addEventListener(eventType, eventCallback);\n        targetElements.push(eventTarget);\n    });\n    return targetElements;\n}\nfunction $3a07be1bc7c23c7f$export$6c521e86931cae84(timestamp, isMilliSeconds = true, locale = null) {\n    const dateObj = new Date(isMilliSeconds ? timestamp : timestamp * 1000);\n    const formatLocale = locale ?? navigator.language;\n    const formatOptions = {\n        year: \"numeric\",\n        month: \"numeric\",\n        day: \"numeric\",\n        hour: \"numeric\",\n        minute: \"numeric\",\n        second: \"numeric\"\n    };\n    return new Intl.DateTimeFormat(formatLocale, formatOptions).format(dateObj);\n// return `${dateObj.toLocaleDateString(formatLocale)} ${dateObj.toLocaleTimeString(formatLocale)}`;\n}\nfunction $3a07be1bc7c23c7f$export$a6f905893761824c(text, lengthLimit = 1) {\n    return text !== undefined && text !== null && text.length !== undefined && text.length >= lengthLimit;\n}\nfunction $3a07be1bc7c23c7f$export$4aef7de70321e0b6(number) {\n    return number !== undefined && number !== null && !isNaN(number);\n}\nfunction $3a07be1bc7c23c7f$export$7d558e3702f02251(arr, lengthLimit = 1) {\n    return arr !== undefined && arr !== null && Array.isArray(arr) && arr.length !== undefined && arr.length >= lengthLimit;\n}\nfunction $3a07be1bc7c23c7f$export$4681d16351dbb61(obj, requiredProperties = 1) {\n    return obj !== undefined && obj !== null && typeof obj == \"object\" && Object.keys(obj).length >= requiredProperties;\n}\nfunction $3a07be1bc7c23c7f$export$ab2fe02786cfa43c(elementType, elementText, parentElement = null, elementClass = \"\", elementAttributes = null, allowHTML = false) {\n    let newElement = document.createElement(elementType);\n    elementType = elementType.toLowerCase();\n    // Set any attributes on the element\n    if ($3a07be1bc7c23c7f$export$4681d16351dbb61(elementAttributes, 1)) for(const attributeName in elementAttributes)newElement.setAttribute(attributeName, elementAttributes[attributeName]);\n    // Set CSS class(es) on the element\n    $3a07be1bc7c23c7f$export$68a589e25833f984(newElement, elementClass);\n    // If text content is an array, check if the type is a list or select tag\n    if ($3a07be1bc7c23c7f$export$7d558e3702f02251(elementText)) {\n        // If type is a list and text is an array, build list items\n        if (elementType == \"ul\" || elementType == \"ol\") for (const listItemText of elementText){\n            const newListItem = document.createElement(\"li\");\n            $3a07be1bc7c23c7f$export$375d3942de154e76(newListItem, listItemText, allowHTML);\n            newElement.appendChild(newListItem);\n        }\n        else if (elementType == \"select\" || elementType == \"datalist\") for (const optionItemText of elementText){\n            const [optValue, optLabel, optGroup] = optionItemText.split(\"|\");\n            const newOptionItem = document.createElement(\"option\");\n            $3a07be1bc7c23c7f$export$375d3942de154e76(newOptionItem, optLabel ?? optValue, allowHTML);\n            newOptionItem.value = optValue;\n            if (optGroup !== undefined) {\n                let optionGroup = newElement.querySelector(`optgroup[label=\"${optGroup}\"]`);\n                if (optionGroup === undefined || optionGroup === null) {\n                    optionGroup = document.createElement(\"optgroup\");\n                    optionGroup.label = optGroup;\n                    newElement.appendChild(optionGroup);\n                }\n                optionGroup.appendChild(newOptionItem);\n            } else newElement.appendChild(newOptionItem);\n        }\n        else $3a07be1bc7c23c7f$export$375d3942de154e76(newElement, elementText[0], allowHTML);\n    } else if ($3a07be1bc7c23c7f$export$a6f905893761824c(elementText, 1)) {\n        // Special case for images - set ALT attribute\n        if (elementType == \"img\") newElement.alt = elementText;\n        else if (elementType == \"input\" && elementText.length > 0) {\n            const actualNewElement = newElement;\n            const newElementLabel = document.createElement(\"label\");\n            newElement = document.createElement(\"div\");\n            newElement.id = `${actualNewElement.id}-wrapper`;\n            if (elementClass.length > 0) newElement.classList.add((Array.isArray(elementClass) ? elementClass[0] : elementClass) + \"-wrapper\");\n            newElementLabel.setAttribute(\"for\", actualNewElement.id);\n            $3a07be1bc7c23c7f$export$375d3942de154e76(newElementLabel, elementText, allowHTML);\n            if (actualNewElement.getAttribute(\"type\") == \"radio\" || actualNewElement.getAttribute(\"type\") == \"checkbox\") {\n                newElementLabel.classList.add(`input-box-label`);\n                newElement.append(actualNewElement, newElementLabel);\n            } else newElement.append(newElementLabel, actualNewElement);\n        } else $3a07be1bc7c23c7f$export$375d3942de154e76(newElement, elementText, allowHTML);\n    }\n    // Append to parent, if set\n    if (parentElement !== undefined && parentElement !== null) parentElement.appendChild(newElement);\n    return newElement;\n}\nfunction $3a07be1bc7c23c7f$export$375d3942de154e76(element, content, allowHTML) {\n    if (allowHTML) element.innerHTML = content;\n    else element.innerText = content;\n}\nfunction $3a07be1bc7c23c7f$export$68a589e25833f984(targetElement, classesToAdd) {\n    if (targetElement !== undefined && targetElement !== null) {\n        if (classesToAdd.length > 0) {\n            if (Array.isArray(classesToAdd)) targetElement.classList.add(...classesToAdd);\n            else if ($3a07be1bc7c23c7f$export$a6f905893761824c(classesToAdd)) targetElement.classList.add(classesToAdd);\n        }\n    }\n}\nfunction $3a07be1bc7c23c7f$export$a45229d174408848(elementType, elementText, parentElement, cssClass, attributes, allowHTML) {\n    let selector = \"\";\n    if ($3a07be1bc7c23c7f$export$4681d16351dbb61(attributes) && $3a07be1bc7c23c7f$export$a6f905893761824c(attributes.id)) selector = `#${attributes.id}`;\n    else if ($3a07be1bc7c23c7f$export$7d558e3702f02251(cssClass)) selector = `${elementType}.${cssClass.join(\".\")}`;\n    else if ($3a07be1bc7c23c7f$export$a6f905893761824c(cssClass)) selector = `${elementType}.${cssClass}`;\n    else selector = elementType;\n    let targetElement = parentElement.querySelector(selector);\n    if ($3a07be1bc7c23c7f$export$4681d16351dbb61(targetElement, 0)) {\n        if (elementType == \"ul\" || elementType == \"ol\") {\n            targetElement.innerHTML = \"\";\n            for (const listItemText of elementText){\n                const newListItem = document.createElement(\"li\");\n                $3a07be1bc7c23c7f$export$375d3942de154e76(newListItem, listItemText, allowHTML);\n                targetElement.appendChild(newListItem);\n            }\n        } else if (elementType == \"select\" || elementType == \"datalist\") {\n            targetElement.innerHTML = \"\";\n            for (const optionItemText of elementText){\n                const [optValue, optLabel, optGroup] = optionItemText.split(\"|\");\n                const newOptionItem = document.createElement(\"option\");\n                $3a07be1bc7c23c7f$export$375d3942de154e76(newOptionItem, optLabel ?? optValue, allowHTML);\n                newOptionItem.value = optValue;\n                if (optGroup !== undefined) {\n                    let optionGroup = targetElement.querySelector(`optgroup[label=\"${optGroup}\"]`);\n                    if (optionGroup === undefined || optionGroup === null) {\n                        optionGroup = document.createElement(\"optgroup\");\n                        optionGroup.label = optGroup;\n                        targetElement.appendChild(optionGroup);\n                    }\n                    optionGroup.appendChild(newOptionItem);\n                } else targetElement.appendChild(newOptionItem);\n            }\n        } else $3a07be1bc7c23c7f$export$375d3942de154e76(targetElement, elementText, allowHTML);\n    } else targetElement = $3a07be1bc7c23c7f$export$ab2fe02786cfa43c(elementType, elementText, parentElement, cssClass, attributes, allowHTML);\n    return targetElement;\n}\n\n\n/*\r\n    RestApi.js\r\n\r\n    Class for making requests to a REST API using JSON data. \r\n*/ class $227a5282996e58c2$export$2e2bcd8739ae039 {\n    #urlBase;\n    #urlSuffix;\n    // Set the base URL to access the api, and any default suffix (like \".json\" on Firebase)\n    // Each request can then extend on the base url, and add query parameters. \n    constructor(baseUrl, urlSuffix = \"\"){\n        this.#urlBase = baseUrl;\n        this.#urlSuffix = urlSuffix;\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\n    // Fetch data from remote source URL path in JSON format\n    async getJson(urlPath = \"\", queryParams = null) {\n        const url = this.#buildRequestUrl(urlPath, queryParams);\n        const response = await fetch(url);\n        let result = await response.json();\n        if (!response.ok) this.#handleResponseErrors(response, result);\n        return result;\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\n    // Convert specified object to JSON and submit it to the specified URL using POST method. \n    async postJson(formData, urlPath = \"\", queryParams = null) {\n        formData = formData ?? {};\n        const url = this.#buildRequestUrl(urlPath, queryParams);\n        const options = {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: formData instanceof FormData ? this.formdataToJson(formData) : JSON.stringify(formData)\n        };\n        let response = await fetch(url, options);\n        let result = await response.json();\n        if (!response.ok) this.#handleResponseErrors(response, result);\n        return result;\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\n    // Convert specified object to JSON and submit it to the specified URL using POST method. \n    async updateJson(formData = null, urlPath = \"\", queryParams = null) {\n        formData = formData ?? {};\n        const url = this.#buildRequestUrl(urlPath, queryParams);\n        const options = {\n            method: \"PATCH\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: formData instanceof FormData ? this.formdataToJson(formData) : JSON.stringify(formData)\n        };\n        let response = await fetch(url, options);\n        let result = await response.json();\n        if (!response.ok) this.#handleResponseErrors(response, result);\n        return result;\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\n    // Remove data from remote source at the specified URL path\n    async deleteJson(formData = null, urlPath = \"\", queryParams = null) {\n        formData = formData ?? {};\n        const url = this.#buildRequestUrl(urlPath, queryParams);\n        const options = {\n            method: \"DELETE\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: formData instanceof FormData ? this.formdataToJson(formData) : JSON.stringify(formData)\n        };\n        let response = await fetch(url, options);\n        let result = await response.json();\n        if (!response.ok) this.#handleResponseErrors(response, result);\n        return result;\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\n    // Return a json-encoded object from a FormData object\n    formdataToJson(formData) {\n        var dataObject = {};\n        if (formData instanceof FormData) formData.forEach((value, key)=>{\n            // In case the remote api is type sensitive (like Firebase), convert numbers and booleans from FormData strings \n            let currValue = !isNaN(value) ? parseInt(value) : value;\n            currValue = currValue === \"true\" ? true : currValue === \"false\" ? false : currValue;\n            // Handle formdata with multiple value fields with the same name attribute (like SELECT tags \n            //  with the \"multiple\" attribute, checkbox groups etc)\n            if (!(key in dataObject)) dataObject[key] = currValue;\n            else {\n                if (!Array.isArray(dataObject[key])) dataObject[key] = [\n                    dataObject[key]\n                ];\n                dataObject[key].push(currValue);\n            }\n        });\n        return JSON.stringify(dataObject);\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\n    // Handle error responses from the API\n    #handleResponseErrors(response, result) {\n        if (response.status == 400) {\n            // Request data validation error - build a HTML list of the validation errors.\n            if (result.error && result.data && result.error == \"Validation error\") {\n                if (Array.isArray(result.data)) {\n                    let errorText = \"<ul>\";\n                    if (result.data.length) for (const errorMsg of result.data)errorText += `<li>${errorMsg.msg ?? \"No message\"}</li>`;\n                    else errorText += `<li>${result.error}</li>`;\n                    errorText += \"</ul>\";\n                    throw new $227a5282996e58c2$export$f2e832acab1bdd79(response.status, errorText);\n                }\n            } else throw new $227a5282996e58c2$export$f2e832acab1bdd79(response.status, `API Error: ${result.error ?? \"\"}  (${response.statusText})`);\n        } else if (response.status == 500) throw new $227a5282996e58c2$export$f2e832acab1bdd79(response.status, `API Error: ${result.error ?? \"\"}  (${response.statusText})`);\n        else throw new $227a5282996e58c2$export$f2e832acab1bdd79(response.status, `API Error: ${response.statusText}`);\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\n    // Assemble URL to send requests to.\n    #buildRequestUrl(urlPath = \"\", queryParams = null) {\n        const url = new URL(`${this.#urlBase}${urlPath.length > 0 ? \"/\" + urlPath : \"\"}${this.#urlSuffix}`);\n        if (queryParams) for(const key in queryParams)url.searchParams.append(key, queryParams[key]);\n        return url;\n    }\n}\nclass $227a5282996e58c2$export$f2e832acab1bdd79 extends Error {\n    #errorCode;\n    constructor(errorCode, errorMessage){\n        super(errorMessage);\n        this.#errorCode = errorCode;\n    }\n    get errorCode() {\n        return this.#errorCode;\n    }\n}\n\n\n/*\r\n    interface.js\r\n\r\n    Module with user interface functions. \r\n*/ \nfunction $dc5f931bf6ee91fa$export$3879b24e8245693d(message) {\n    const errorBox = document.querySelector(\"#errors\");\n    errorBox.innerHTML = \"\";\n    $3a07be1bc7c23c7f$export$ab2fe02786cfa43c(\"h2\", \"Error\", errorBox);\n    $3a07be1bc7c23c7f$export$ab2fe02786cfa43c(\"div\", message, errorBox, \"error-box-message\", null, true);\n    $3a07be1bc7c23c7f$export$ab2fe02786cfa43c(\"button\", \"OK\", errorBox, \"error-close-button\").addEventListener(\"click\", (event)=>{\n        event.currentTarget.closest(\"dialog\").close();\n    });\n    errorBox.showModal();\n}\nfunction $dc5f931bf6ee91fa$export$cf04eaa0632e6ee5(task, onAssignTaskSubmit) {\n    const card = $3a07be1bc7c23c7f$export$ab2fe02786cfa43c(\"article\", task.message, null, [\n        \"task-box\",\n        `color-${task.category}`\n    ], {\n        taskid: task.taskid\n    });\n    switch(task.state){\n        case \"todo\":\n            // Assign task form\n            const assignForm = $3a07be1bc7c23c7f$export$ab2fe02786cfa43c(\"form\", \"\", card, \"task-assign-form\");\n            $3a07be1bc7c23c7f$export$ab2fe02786cfa43c(\"input\", \"\", assignForm, \"\", {\n                placeholder: \"Assign task to\",\n                type: \"text\",\n                name: \"assigned\",\n                \"minlength\": \"2\",\n                \"maxlength\": \"20\",\n                required: \"true\"\n            });\n            $3a07be1bc7c23c7f$export$ab2fe02786cfa43c(\"button\", \"Assign\", assignForm);\n            if (onAssignTaskSubmit) assignForm.addEventListener(\"submit\", onAssignTaskSubmit);\n            break;\n        case \"wip\":\n            // Done button and display assigned name\n            $3a07be1bc7c23c7f$export$ab2fe02786cfa43c(\"div\", task.assigned, card, \"assigned-to\");\n            const doneButtonWrapper = $3a07be1bc7c23c7f$export$ab2fe02786cfa43c(\"div\", \"\", card, \"task-button-wrapper\");\n            $3a07be1bc7c23c7f$export$ab2fe02786cfa43c(\"button\", \"Done \\xbb\", doneButtonWrapper);\n            break;\n        case \"done\":\n            // Delete button and display assigned name\n            $3a07be1bc7c23c7f$export$ab2fe02786cfa43c(\"div\", task.assigned, card, \"assigned-to\");\n            const deleteButtonWrapper = $3a07be1bc7c23c7f$export$ab2fe02786cfa43c(\"div\", \"\", card, \"task-delete-wrapper\");\n            $3a07be1bc7c23c7f$export$ab2fe02786cfa43c(\"button\", \"X\", deleteButtonWrapper);\n            break;\n    }\n    return card;\n}\n\n\nconst $eee1d11aa096bfee$var$api = new (0, $227a5282996e58c2$export$2e2bcd8739ae039)(\"http://localhost:3000/tasks\");\nfunction $eee1d11aa096bfee$export$f08d315250e1aa23(taskId) {\n    $eee1d11aa096bfee$var$api.deleteJson(null, `delete/${taskId}`).then(()=>{\n        $eee1d11aa096bfee$export$12bee4b57621ceb();\n    }).catch((error)=>{\n        (0, $dc5f931bf6ee91fa$export$3879b24e8245693d)(error.message);\n    });\n}\nfunction $eee1d11aa096bfee$export$bdadf32240c8542d(taskId) {\n    $eee1d11aa096bfee$var$api.updateJson(null, `done/${taskId}`).then(()=>{\n        $eee1d11aa096bfee$export$12bee4b57621ceb();\n    }).catch((error)=>{\n        (0, $dc5f931bf6ee91fa$export$3879b24e8245693d)(error.message);\n    });\n}\nfunction $eee1d11aa096bfee$export$13ce2202561ee22c(taskFormData) {\n    $eee1d11aa096bfee$var$api.updateJson(taskFormData, \"assign\").then(()=>{\n        $eee1d11aa096bfee$export$12bee4b57621ceb();\n    }).catch((error)=>{\n        (0, $dc5f931bf6ee91fa$export$3879b24e8245693d)(error.message);\n    });\n}\nfunction $eee1d11aa096bfee$export$210cf76140947b0c(taskFormData) {\n    $eee1d11aa096bfee$var$api.postJson(taskFormData, \"add\").then(()=>{\n        $eee1d11aa096bfee$export$12bee4b57621ceb();\n    }).catch((error)=>{\n        (0, $dc5f931bf6ee91fa$export$3879b24e8245693d)(error.message);\n    });\n}\nfunction $eee1d11aa096bfee$export$12bee4b57621ceb() {\n    $eee1d11aa096bfee$var$api.getJson(\"list\").then((taskData)=>{\n        const columns = {\n            todo: document.querySelector(\"#tasks-todo-box\"),\n            wip: document.querySelector(\"#tasks-wip-box\"),\n            done: document.querySelector(\"#tasks-done-box\")\n        };\n        Object.values(columns).forEach((column)=>{\n            column.innerHTML = \"\";\n        });\n        if (taskData.length) {\n            taskData.sort((a, b)=>b.time - a.time);\n            for (const task of taskData){\n                const card = (0, $dc5f931bf6ee91fa$export$cf04eaa0632e6ee5)(task, $eee1d11aa096bfee$var$onAssignTaskSubmit);\n                columns[task.state].appendChild(card);\n            }\n        }\n    }).catch((error)=>{\n        (0, $dc5f931bf6ee91fa$export$3879b24e8245693d)(error.message);\n    });\n}\n////////////////////////////////////////////////////////////////////////////////////////////////\n// Submit handler: Assign someone to a task\nfunction $eee1d11aa096bfee$var$onAssignTaskSubmit(event) {\n    event.preventDefault();\n    const formData = new FormData(event.currentTarget);\n    formData.set(\"taskid\", event.submitter.closest(\"article\").getAttribute(\"taskid\"));\n    $eee1d11aa096bfee$export$13ce2202561ee22c(formData);\n    event.currentTarget.reset();\n}\n\n\n// Display all tasks when the page loads. \n(0, $eee1d11aa096bfee$export$12bee4b57621ceb)();\n///////////////////////////////////////////////////////////////////////////////\n// Event handler: Done button on In Progress tasks\ndocument.querySelector(\"#tasks-wip-box\").addEventListener(\"submit\", (event)=>{\n    event.preventDefault();\n    const taskId = event.submitter.closest(\"article\").getAttribute(\"taskid\");\n    if (taskId) (0, $eee1d11aa096bfee$export$bdadf32240c8542d)(taskId);\n    else console.error(\"Error marking task as done: Task ID not found!\");\n});\n///////////////////////////////////////////////////////////////////////////////\n// Event handler: Delete button on Done tasks\ndocument.querySelector(\"#tasks-done-box\").addEventListener(\"submit\", (event)=>{\n    event.preventDefault();\n    const taskId = event.submitter.closest(\"article\").getAttribute(\"taskid\");\n    if (taskId) {\n        if (confirm(\"Are you sure you wish to delete this task?\")) (0, $eee1d11aa096bfee$export$f08d315250e1aa23)(taskId);\n    } else console.error(\"Error deleting task: Task ID not found!\");\n});\n///////////////////////////////////////////////////////////////////////////////\n// Event handler: add a new task\ndocument.querySelector(\"#new-task-form\").addEventListener(\"submit\", (event)=>{\n    event.preventDefault();\n    const formData = new FormData(event.currentTarget, event.submitter);\n    (0, $eee1d11aa096bfee$export$210cf76140947b0c)(formData);\n    event.currentTarget.reset();\n});\n\n\n//# sourceMappingURL=index.123574e1.js.map\n","/*\r\n    main.js\r\n\r\n    Main script of the frontend page. Handlers for user input. \r\n*/\r\nimport { showTasks, addNewTask, setTaskDone, deleteTask } from './modules/tasks.js';\r\n\r\n// Display all tasks when the page loads. \r\nshowTasks();\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n// Event handler: Done button on In Progress tasks\r\ndocument.querySelector(\"#tasks-wip-box\").addEventListener(\"submit\", (event) => {\r\n    event.preventDefault();\r\n\r\n    const taskId = event.submitter.closest(\"article\").getAttribute(\"taskid\");\r\n    if (taskId) {\r\n        setTaskDone(taskId);\r\n    }\r\n    else {\r\n        console.error(\"Error marking task as done: Task ID not found!\");\r\n    }\r\n});\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n// Event handler: Delete button on Done tasks\r\ndocument.querySelector(\"#tasks-done-box\").addEventListener(\"submit\", (event) => {\r\n    event.preventDefault();\r\n\r\n    const taskId = event.submitter.closest(\"article\").getAttribute(\"taskid\");\r\n    if (taskId) {\r\n        if (confirm(\"Are you sure you wish to delete this task?\")) {\r\n            deleteTask(taskId);\r\n        }\r\n    }\r\n    else {\r\n        console.error(\"Error deleting task: Task ID not found!\");\r\n    }\r\n});\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n// Event handler: add a new task\r\ndocument.querySelector(\"#new-task-form\").addEventListener(\"submit\", (event) => {\r\n    event.preventDefault();\r\n    const formData = new FormData(event.currentTarget, event.submitter);\r\n    addNewTask(formData);\r\n    event.currentTarget.reset();\r\n});\r\n\r\n","/*\r\n    tasks.js\r\n\r\n    Module with functions for showing, creating and modifying tasks. \r\n*/\r\nimport * as Utilities from './utilities.js';\r\nimport RestApi from './RestApi.js';\r\nimport { showError, createTaskCard } from './interface.js';\r\n\r\n\r\nconst api = new RestApi('http://localhost:3000/tasks');\r\n// const api = new RestApi('http://192.168.1.3:3000/tasks');\r\n\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////\r\n// Remove a task from the board\r\nexport function deleteTask(taskId) {\r\n    api.deleteJson(null, `delete/${taskId}`).then(() => {\r\n        showTasks();\r\n    }).catch((error) => {\r\n        showError(error.message);\r\n    });\r\n}\r\n\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////\r\n// Move a task to the Done column\r\nexport function setTaskDone(taskId) {\r\n    api.updateJson(null, `done/${taskId}`).then(() => {\r\n        showTasks();\r\n    }).catch((error) => {\r\n        showError(error.message);\r\n    });\r\n}\r\n\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////\r\n// Set an assigned name and move task to the In Progress column\r\nexport function assignTask(taskFormData) {\r\n    api.updateJson(taskFormData, 'assign').then(() => {\r\n        showTasks();\r\n    }).catch((error) => {\r\n        showError(error.message);\r\n    });\r\n}\r\n\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////\r\n// Add a new task to the ToDo column\r\nexport function addNewTask(taskFormData) {\r\n    api.postJson(taskFormData, 'add').then(() => {\r\n        showTasks();\r\n    }).catch((error) => {\r\n        showError(error.message);\r\n    });\r\n}\r\n\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////\r\n// Display all tasks on the page\r\nexport function showTasks() {\r\n    api.getJson('list').then((taskData) => {\r\n        const columns = {\r\n            todo: document.querySelector(\"#tasks-todo-box\"),\r\n            wip: document.querySelector(\"#tasks-wip-box\"),\r\n            done: document.querySelector(\"#tasks-done-box\")\r\n        }\r\n\r\n        Object.values(columns).forEach((column) => { column.innerHTML = \"\" });\r\n\r\n        if (taskData.length) {\r\n            taskData.sort((a, b) => b.time - a.time);\r\n\r\n            for (const task of taskData) {\r\n                const card = createTaskCard(task, onAssignTaskSubmit);\r\n                columns[task.state].appendChild(card);\r\n            }\r\n        }\r\n    }).catch((error) => {\r\n        showError(error.message);\r\n    });\r\n}\r\n\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////\r\n// Submit handler: Assign someone to a task\r\nfunction onAssignTaskSubmit(event) {\r\n    event.preventDefault();\r\n    const formData = new FormData(event.currentTarget);\r\n    formData.set('taskid', event.submitter.closest(\"article\").getAttribute(\"taskid\"));\r\n    assignTask(formData);\r\n    event.currentTarget.reset();\r\n};","/*\r\n    General utility functions\r\n*/\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////\r\n// Set an event listener on the element(s) matching the targetIdentifier selector, if any exist.\r\n// Return an array with all matching elements. \r\nexport function setEventListener(targetSelector, eventType, eventCallback) {\r\n    const eventTargets = document.querySelectorAll(targetSelector);\r\n    const targetElements = [];\r\n    if ((eventTargets !== undefined) && (eventTargets !== null)) {\r\n        eventTargets.forEach((eventTarget) => {\r\n            eventTarget.addEventListener(eventType, eventCallback);\r\n            targetElements.push(eventTarget);\r\n        });\r\n    }\r\n    return targetElements;\r\n}\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////\r\n// Convert a timestamp number to a displayable date string using the formatting of the\r\n// specified language locale (e.g. 'sv-SE', 'en-US' etc), or the browser language \r\n// if none is specified. \r\nexport function timestampToDateTime(timestamp, isMilliSeconds = true, locale = null) {\r\n    const dateObj = new Date(isMilliSeconds ? timestamp : timestamp * 1000);\r\n    const formatLocale = (locale ?? navigator.language);\r\n    const formatOptions = {\r\n        year: \"numeric\",\r\n        month: \"numeric\",\r\n        day: \"numeric\",\r\n        hour: \"numeric\",\r\n        minute: \"numeric\",\r\n        second: \"numeric\"\r\n    };\r\n\r\n    return new Intl.DateTimeFormat(formatLocale, formatOptions).format(dateObj);\r\n    // return `${dateObj.toLocaleDateString(formatLocale)} ${dateObj.toLocaleTimeString(formatLocale)}`;\r\n}\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////\r\n// Utility to determine if a text variable has been set and assigned a value.\r\nexport function getIsValidText(text, lengthLimit = 1) {\r\n    return ((text !== undefined) && (text !== null) && (text.length !== undefined) && (text.length >= lengthLimit));\r\n}\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////\r\n// Kontrollera om angiven parameter är ett giltigt nummer\r\nexport function getIsValidNumber(number) {\r\n    return (number !== undefined) && (number !== null) && !isNaN(number);\r\n}\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////\r\n// Utility to determine if a variable is an array with content\r\nexport function getIsValidArray(arr, lengthLimit = 1) {\r\n    return ((arr !== undefined) && (arr !== null) && (Array.isArray(arr)) && (arr.length !== undefined) && (arr.length >= lengthLimit));\r\n}\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////\r\n//  Utility to determine if a variable is an object with properties set\r\nexport function getIsValidObject(obj, requiredProperties = 1) {\r\n    return ((obj !== undefined) && (obj !== null) && (typeof obj == \"object\") && (Object.keys(obj).length >= requiredProperties));\r\n}\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////\r\n// Oneliner to create and return a new DOM element with content, optionally appending it to a parent element.\r\n//  * elementText can either be a string holding the content of the tag or the ALT of an img tag, or an array of strings \r\n//    containing the listitems/options for UL, OL, SELECT and DATALIST tags. In the case of SELECT/DATALIST the strings \r\n//    can also be formated like: SELECT: value|textlabel|optgroup      DATALIST: value|textlabel\r\n//  * elementClass can be a string or an array of strings holding CSS class(es) to apply to the element. \r\n//  * The elementAttributes parameter can be an object with a property for each attribute to set on the HTML element. \r\n// Function returns the newly created DOM element (or wrapper element if a wrapper is created).\r\n// Remember: Set CSS \"white-space: pre-wrap;\" on element if allowHTML is true and newlines still should displayed like with innerText. \r\nexport function createHTMLElement(elementType, elementText, parentElement = null, elementClass = '', elementAttributes = null, allowHTML = false) {\r\n    let newElement = document.createElement(elementType);\r\n\r\n    elementType = elementType.toLowerCase();\r\n\r\n    // Set any attributes on the element\r\n    if (getIsValidObject(elementAttributes, 1)) {\r\n        for (const attributeName in elementAttributes) {\r\n            newElement.setAttribute(attributeName, elementAttributes[attributeName]);\r\n        }\r\n    }\r\n\r\n    // Set CSS class(es) on the element\r\n    addClassToElement(newElement, elementClass);\r\n\r\n    // If text content is an array, check if the type is a list or select tag\r\n    if (getIsValidArray(elementText)) {\r\n        // If type is a list and text is an array, build list items\r\n        if ((elementType == 'ul') || (elementType == 'ol')) {\r\n            for (const listItemText of elementText) {\r\n                const newListItem = document.createElement(\"li\");\r\n                setElementContent(newListItem, listItemText, allowHTML);\r\n                newElement.appendChild(newListItem);\r\n            }\r\n        }\r\n        // If type is a select form element and text is an array, build select option list\r\n        else if ((elementType == 'select') || (elementType == 'datalist')) {\r\n            for (const optionItemText of elementText) {\r\n                const [optValue, optLabel, optGroup] = optionItemText.split('|');\r\n                const newOptionItem = document.createElement(\"option\");\r\n\r\n                setElementContent(newOptionItem, (optLabel ?? optValue), allowHTML);\r\n                newOptionItem.value = optValue;\r\n\r\n                if (optGroup !== undefined) {\r\n                    let optionGroup = newElement.querySelector(`optgroup[label=\"${optGroup}\"]`);\r\n                    if ((optionGroup === undefined) || (optionGroup === null)) {\r\n                        optionGroup = document.createElement(\"optgroup\");\r\n                        optionGroup.label = optGroup;\r\n                        newElement.appendChild(optionGroup);\r\n                    }\r\n                    optionGroup.appendChild(newOptionItem);\r\n                }\r\n                else {\r\n                    newElement.appendChild(newOptionItem);\r\n                }\r\n            }\r\n        }\r\n        // Not a list-type element, just use the first string \r\n        else {\r\n            setElementContent(newElement, elementText[0], allowHTML);\r\n        }\r\n    }\r\n    else if (getIsValidText(elementText, 1)) {\r\n        // Special case for images - set ALT attribute\r\n        if (elementType == 'img') {\r\n            newElement.alt = elementText;\r\n        }\r\n        // Special case for input fields, create labels\r\n        else if ((elementType == 'input') && (elementText.length > 0)) {\r\n            const actualNewElement = newElement;\r\n            const newElementLabel = document.createElement(\"label\");\r\n            newElement = document.createElement(\"div\");\r\n            newElement.id = `${actualNewElement.id}-wrapper`;\r\n            if (elementClass.length > 0) {\r\n                newElement.classList.add((Array.isArray(elementClass) ? elementClass[0] : elementClass) + \"-wrapper\");\r\n            }\r\n\r\n            newElementLabel.setAttribute(\"for\", actualNewElement.id);\r\n            setElementContent(newElementLabel, elementText, allowHTML);\r\n\r\n            if ((actualNewElement.getAttribute(\"type\") == \"radio\") || (actualNewElement.getAttribute(\"type\") == \"checkbox\")) {\r\n                newElementLabel.classList.add(`input-box-label`);\r\n                newElement.append(actualNewElement, newElementLabel);\r\n            }\r\n            else {\r\n                newElement.append(newElementLabel, actualNewElement);\r\n            }\r\n\r\n        }\r\n        // Everything else, set the text content\r\n        else {\r\n            setElementContent(newElement, elementText, allowHTML);\r\n        }\r\n    }\r\n\r\n    // Append to parent, if set\r\n    if ((parentElement !== undefined) && (parentElement !== null)) {\r\n        parentElement.appendChild(newElement);\r\n    }\r\n    return newElement;\r\n}\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////\r\n// Sets the content of an element as text or HTML depending on the allowHTML parameter. \r\nexport function setElementContent(element, content, allowHTML) {\r\n    if (allowHTML) {\r\n        element.innerHTML = content;\r\n    }\r\n    else {\r\n        element.innerText = content;\r\n    }\r\n}\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////\r\n// Add CSS class(es) to a DOM element\r\nexport function addClassToElement(targetElement, classesToAdd) {\r\n    if ((targetElement !== undefined) && (targetElement !== null)) {\r\n        if (classesToAdd.length > 0) {\r\n            if (Array.isArray(classesToAdd)) {\r\n                targetElement.classList.add(...classesToAdd);\r\n            }\r\n            else if (getIsValidText(classesToAdd)) {\r\n                targetElement.classList.add(classesToAdd);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////\r\n// Set content of the matching HTML element if it exists, otherwise create it. \r\nexport function setHTMLElement(elementType, elementText, parentElement, cssClass, attributes, allowHTML) {\r\n    let selector = '';\r\n    if ((getIsValidObject(attributes) && getIsValidText(attributes.id))) {\r\n        selector = `#${attributes.id}`;\r\n    }\r\n    else if (getIsValidArray(cssClass)) {\r\n        selector = `${elementType}.${cssClass.join(\".\")}`;\r\n    }\r\n    else if (getIsValidText(cssClass)) {\r\n        selector = `${elementType}.${cssClass}`;\r\n    }\r\n    else {\r\n        selector = elementType;\r\n    }\r\n\r\n    let targetElement = parentElement.querySelector(selector);\r\n    if (getIsValidObject(targetElement, 0)) {\r\n        if ((elementType == 'ul') || (elementType == 'ol')) {\r\n            targetElement.innerHTML = '';\r\n            for (const listItemText of elementText) {\r\n                const newListItem = document.createElement(\"li\");\r\n                setElementContent(newListItem, listItemText, allowHTML);\r\n                targetElement.appendChild(newListItem);\r\n            }\r\n        }\r\n        else if ((elementType == 'select') || (elementType == 'datalist')) {\r\n            targetElement.innerHTML = '';\r\n            for (const optionItemText of elementText) {\r\n                const [optValue, optLabel, optGroup] = optionItemText.split('|');\r\n                const newOptionItem = document.createElement(\"option\");\r\n\r\n                setElementContent(newOptionItem, (optLabel ?? optValue), allowHTML);\r\n                newOptionItem.value = optValue;\r\n\r\n                if (optGroup !== undefined) {\r\n                    let optionGroup = targetElement.querySelector(`optgroup[label=\"${optGroup}\"]`);\r\n                    if ((optionGroup === undefined) || (optionGroup === null)) {\r\n                        optionGroup = document.createElement(\"optgroup\");\r\n                        optionGroup.label = optGroup;\r\n                        targetElement.appendChild(optionGroup);\r\n                    }\r\n                    optionGroup.appendChild(newOptionItem);\r\n                }\r\n                else {\r\n                    targetElement.appendChild(newOptionItem);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            setElementContent(targetElement, elementText, allowHTML);\r\n        }\r\n    }\r\n    else {\r\n        targetElement = createHTMLElement(elementType, elementText, parentElement, cssClass, attributes, allowHTML);\r\n    }\r\n\r\n    return targetElement;\r\n}\r\n","/*\r\n    RestApi.js\r\n\r\n    Class for making requests to a REST API using JSON data. \r\n*/\r\nexport default class RestApi {\r\n    #urlBase;\r\n    #urlSuffix;\r\n\r\n    // Set the base URL to access the api, and any default suffix (like \".json\" on Firebase)\r\n    // Each request can then extend on the base url, and add query parameters. \r\n    constructor(baseUrl, urlSuffix = \"\") {\r\n        this.#urlBase = baseUrl;\r\n        this.#urlSuffix = urlSuffix;\r\n    }\r\n\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Fetch data from remote source URL path in JSON format\r\n    async getJson(urlPath = '', queryParams = null) {\r\n        const url = this.#buildRequestUrl(urlPath, queryParams);\r\n        const response = await fetch(url);\r\n        let result = await response.json();\r\n        if (!response.ok) {\r\n            this.#handleResponseErrors(response, result);\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Convert specified object to JSON and submit it to the specified URL using POST method. \r\n    async postJson(formData, urlPath = '', queryParams = null) {\r\n        formData = formData ?? {};\r\n        const url = this.#buildRequestUrl(urlPath, queryParams);\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: (formData instanceof FormData ? this.formdataToJson(formData) : JSON.stringify(formData)),\r\n        };\r\n\r\n        let response = await fetch(url, options);\r\n        let result = await response.json();\r\n        if (!response.ok) {\r\n            this.#handleResponseErrors(response, result);\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Convert specified object to JSON and submit it to the specified URL using POST method. \r\n    async updateJson(formData = null, urlPath = '', queryParams = null) {\r\n        formData = formData ?? {};\r\n        const url = this.#buildRequestUrl(urlPath, queryParams);\r\n        const options = {\r\n            method: \"PATCH\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: (formData instanceof FormData ? this.formdataToJson(formData) : JSON.stringify(formData)),\r\n        };\r\n\r\n        let response = await fetch(url, options);\r\n        let result = await response.json();\r\n        if (!response.ok) {\r\n            this.#handleResponseErrors(response, result);\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Remove data from remote source at the specified URL path\r\n    async deleteJson(formData = null, urlPath = '', queryParams = null) {\r\n        formData = formData ?? {};\r\n        const url = this.#buildRequestUrl(urlPath, queryParams);\r\n        const options = {\r\n            method: \"DELETE\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: (formData instanceof FormData ? this.formdataToJson(formData) : JSON.stringify(formData)),\r\n        };\r\n\r\n        let response = await fetch(url, options);\r\n        let result = await response.json();\r\n        if (!response.ok) {\r\n            this.#handleResponseErrors(response, result);\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Return a json-encoded object from a FormData object\r\n    formdataToJson(formData) {\r\n        var dataObject = {};\r\n        if (formData instanceof FormData) {\r\n            formData.forEach((value, key) => {\r\n                // In case the remote api is type sensitive (like Firebase), convert numbers and booleans from FormData strings \r\n                let currValue = (!isNaN(value) ? parseInt(value) : value);\r\n                currValue = (currValue === \"true\" ? true : (currValue === \"false\" ? false : currValue));\r\n\r\n                // Handle formdata with multiple value fields with the same name attribute (like SELECT tags \r\n                //  with the \"multiple\" attribute, checkbox groups etc)\r\n                if (!(key in dataObject)) {\r\n                    dataObject[key] = currValue;\r\n                }\r\n                else {\r\n                    if (!Array.isArray(dataObject[key])) {\r\n                        dataObject[key] = [dataObject[key]];\r\n                    }\r\n                    dataObject[key].push(currValue);\r\n                }\r\n            });\r\n        }\r\n        return JSON.stringify(dataObject);\r\n    }\r\n\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Handle error responses from the API\r\n    #handleResponseErrors(response, result) {\r\n        if ((response.status == 400)) {\r\n            // Request data validation error - build a HTML list of the validation errors.\r\n            if (result.error && result.data && (result.error == \"Validation error\")) {\r\n                if (Array.isArray(result.data)) {\r\n                    let errorText = \"<ul>\";\r\n                    if (result.data.length) {\r\n                        for (const errorMsg of result.data) {\r\n                            errorText += `<li>${errorMsg.msg ?? \"No message\"}</li>`;\r\n                        }\r\n                    }\r\n                    else {\r\n                        errorText += `<li>${result.error}</li>`;\r\n                    }\r\n                    errorText += \"</ul>\";\r\n                    throw new ApiError(response.status, errorText);\r\n                }\r\n            }\r\n            // Other type of bad request - show the error message from API\r\n            else {\r\n                throw new ApiError(response.status, `API Error: ${result.error ?? \"\"}  (${response.statusText})`);\r\n            }\r\n        }\r\n        // Server errors - show the error message from API\r\n        else if (response.status == 500) {\r\n            throw new ApiError(response.status, `API Error: ${result.error ?? \"\"}  (${response.statusText})`);\r\n        }\r\n        // Other errors - show request status message\r\n        else {\r\n            throw new ApiError(response.status, `API Error: ${response.statusText}`);\r\n        }\r\n    }\r\n\r\n\r\n    //////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // Assemble URL to send requests to.\r\n    #buildRequestUrl(urlPath = '', queryParams = null) {\r\n        const url = new URL(`${this.#urlBase}${urlPath.length > 0 ? \"/\" + urlPath : \"\"}${this.#urlSuffix}`);\r\n        if (queryParams) {\r\n            for (const key in queryParams) {\r\n                url.searchParams.append(key, queryParams[key]);\r\n            }\r\n        }\r\n        return url;\r\n    }\r\n}\r\n\r\n\r\n// Exception class for keeping response/error codes separate from the message text.\r\nexport class ApiError extends Error {\r\n    #errorCode;\r\n\r\n    constructor(errorCode, errorMessage) {\r\n        super(errorMessage);\r\n        this.#errorCode = errorCode;\r\n    }\r\n\r\n    get errorCode() {\r\n        return this.#errorCode;\r\n    }\r\n}","/*\r\n    interface.js\r\n\r\n    Module with user interface functions. \r\n*/\r\nimport * as Utilities from './utilities.js';\r\n\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////\r\n// Show error messages in a popup dialog box\r\nexport function showError(message) {\r\n    const errorBox = document.querySelector(\"#errors\");\r\n    errorBox.innerHTML = \"\";\r\n\r\n    Utilities.createHTMLElement('h2', 'Error', errorBox);\r\n    Utilities.createHTMLElement('div', message, errorBox, 'error-box-message', null, true);\r\n\r\n    Utilities.createHTMLElement('button', 'OK', errorBox, 'error-close-button').addEventListener(\"click\", (event) => {\r\n        event.currentTarget.closest('dialog').close();\r\n    });\r\n\r\n    errorBox.showModal();\r\n}\r\n\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////\r\n// Create a card/box to display a task (controls depending on its state)\r\nexport function createTaskCard(task, onAssignTaskSubmit) {\r\n    const card = Utilities.createHTMLElement('article', task.message, null, ['task-box', `color-${task.category}`], { taskid: task.taskid });\r\n    switch (task.state) {\r\n        case \"todo\":\r\n            // Assign task form\r\n            const assignForm = Utilities.createHTMLElement('form', '', card, 'task-assign-form');\r\n            Utilities.createHTMLElement('input', '', assignForm, '', { placeholder: \"Assign task to\", type: \"text\", name: \"assigned\", \"minlength\": \"2\", \"maxlength\": \"20\", required: \"true\" });\r\n            Utilities.createHTMLElement('button', 'Assign', assignForm);\r\n            if (onAssignTaskSubmit) {\r\n                assignForm.addEventListener(\"submit\", onAssignTaskSubmit);\r\n            }\r\n            break;\r\n        case \"wip\":\r\n            // Done button and display assigned name\r\n            Utilities.createHTMLElement('div', task.assigned, card, 'assigned-to');\r\n            const doneButtonWrapper = Utilities.createHTMLElement('div', '', card, 'task-button-wrapper');\r\n            Utilities.createHTMLElement('button', 'Done »', doneButtonWrapper);\r\n            break;\r\n        case \"done\":\r\n            // Delete button and display assigned name\r\n            Utilities.createHTMLElement('div', task.assigned, card, 'assigned-to');\r\n            const deleteButtonWrapper = Utilities.createHTMLElement('div', '', card, 'task-delete-wrapper');\r\n            Utilities.createHTMLElement('button', 'X', deleteButtonWrapper);\r\n            break;\r\n    }\r\n    return card;\r\n}\r\n"],"names":["$3a07be1bc7c23c7f$export$a6f905893761824c","text","lengthLimit","undefined","length","$3a07be1bc7c23c7f$export$ab2fe02786cfa43c","elementType","elementText","parentElement","elementClass","elementAttributes","allowHTML","targetElement","newElement","document","createElement","toLowerCase","$3a07be1bc7c23c7f$export$4681d16351dbb61","obj","requiredProperties","Object","keys","attributeName","setAttribute","classesToAdd","Array","isArray","classList","add","$3a07be1bc7c23c7f$export$7d558e3702f02251","arr","listItemText","newListItem","$3a07be1bc7c23c7f$export$375d3942de154e76","appendChild","optionItemText","optValue","optLabel","optGroup","split","newOptionItem","value","optionGroup","querySelector","label","alt","actualNewElement","newElementLabel","id","getAttribute","append","element","content","innerHTML","innerText","$227a5282996e58c2$export$f2e832acab1bdd79","Error","errorCode","constructor","errorMessage","$dc5f931bf6ee91fa$export$3879b24e8245693d","message","errorBox","addEventListener","event","currentTarget","closest","close","showModal","$eee1d11aa096bfee$var$api","urlBase","urlSuffix","baseUrl","getJson","urlPath","queryParams","url","buildRequestUrl","response","fetch","result","json","ok","handleResponseErrors","postJson","formData","options","method","headers","body","FormData","formdataToJson","JSON","stringify","updateJson","deleteJson","dataObject","forEach","key","currValue","isNaN","parseInt","push","status","error","data","errorText","errorMsg","msg","statusText","URL","searchParams","$eee1d11aa096bfee$export$12bee4b57621ceb","then","taskData","columns","todo","wip","done","values","column","task","sort","a","b","time","card","onAssignTaskSubmit","category","taskid","state","assignForm","placeholder","type","name","required","assigned","doneButtonWrapper","deleteButtonWrapper","$eee1d11aa096bfee$var$onAssignTaskSubmit","catch","preventDefault","set","submitter","$eee1d11aa096bfee$export$13ce2202561ee22c","taskFormData","reset","taskId","console","confirm"],"version":3,"file":"index.123574e1.js.map"}